<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccountCreating" xml:space="preserve">
    <value>Storage "{0}" is storing new Account.
  AccountId: {1}
  Realm: {2}</value>
  </data>
  <data name="AccountGetting" xml:space="preserve">
    <value>Storage "{0}" is generating Account from data row.
  Row: {1}</value>
  </data>
  <data name="AccountsLoading" xml:space="preserve">
    <value>Storage "{0}" is loading data rows from Accounts table.
  Query: SELECT ... {1}</value>
  </data>
  <data name="ActivitiesLoading" xml:space="preserve">
    <value>Storage "{0}" is loading data rows from Activities table.
  Query: SELECT ... {1}</value>
  </data>
  <data name="ActivityCreating" xml:space="preserve">
    <value>Storage "{0}" is storing new Activity.
  Account: {1}
  Timestamp: {2}
  Category: {3}
  Subindex: {4}</value>
  </data>
  <data name="ActivityGetting" xml:space="preserve">
    <value>Storage "{0}" is generating Activity from data row.
  Row: {1}</value>
  </data>
  <data name="CodeExecuted" xml:space="preserve">
    <value>Code file "{1}" was compiled and executed in "{0}".
Module types declared in the code is loaded if exists.</value>
  </data>
  <data name="CodeExecuting" xml:space="preserve">
    <value>Compiling Code file "{1}" in the domain "{0}".</value>
  </data>
  <data name="FavorElementCreating" xml:space="preserve">
    <value>Storage "{0}" is storing new FavorElement.
  Account: {1}
  Activity: {2}</value>
  </data>
  <data name="FavorElementGetting" xml:space="preserve">
    <value>Storage "{0}" is generating FavorElement from data row.
  Row: {1}</value>
  </data>
  <data name="FavorMapLoading" xml:space="preserve">
    <value>Storage "{0}" is loading data rows from FavorMap table.
  Query: SELECT ... {1}</value>
  </data>
  <data name="FilterFlowFilterFinished" xml:space="preserve">
    <value>FilterFlow "{0}" finished to filter.</value>
  </data>
  <data name="FilterFlowFilterStarted" xml:space="preserve">
    <value>FilterFlow "{0}" started to filter.
  Selector: {1}
  Source: {2} elements
  Storage: {3}
  Arguments:
{4}</value>
  </data>
  <data name="FollowElementCreating" xml:space="preserve">
    <value>Storage "{0}" is storing new FollowElement.
  Account: {1}
  FollowingAccount: {2}</value>
  </data>
  <data name="FollowElementGetting" xml:space="preserve">
    <value>Storage "{0}" is generating FollowElement from data row.
  Row: {1}</value>
  </data>
  <data name="FollowMapLoading" xml:space="preserve">
    <value>Storage "{0}" is loading data rows from FollowMap table.
  Query: SELECT ... {1}</value>
  </data>
  <data name="InputFlowInputFinished" xml:space="preserve">
    <value>InputFlow "{0}" finished to input.</value>
  </data>
  <data name="InputFlowInputStarted" xml:space="preserve">
    <value>InputFlow "{0}" started to input.
  Selector: {1}
  Storage: {2}
  Arguments:
{3}</value>
  </data>
  <data name="ModuleAdded" xml:space="preserve">
    <value>New module object "{2}" was added as "{1}" in "{0}".</value>
  </data>
  <data name="ModuleInitialized" xml:space="preserve">
    <value>Module "{0}" was initialized.
Configuration file "{1}" was loaded.</value>
  </data>
  <data name="ModuleInitializing" xml:space="preserve">
    <value>Module "{0}" is initializing.</value>
  </data>
  <data name="ModuleLoaded" xml:space="preserve">
    <value>Module assembly was resolved and loaded with the domain name "{0}".</value>
  </data>
  <data name="ModuleRemoved" xml:space="preserve">
    <value>Module "{1}" named "{2}" in "{0}" was removed.</value>
  </data>
  <data name="ModuleUnloaded" xml:space="preserve">
    <value>Module assembly "{0}" was unloaded.</value>
  </data>
  <data name="OutputFlowOutputFinished" xml:space="preserve">
    <value>OutputFlow "{0}" finished to output.</value>
  </data>
  <data name="OutputFlowOutputStarted" xml:space="preserve">
    <value>OutputFlow "{0}" started to output.
  Selector: {1}
  Source: {2} elements
  Storage: {3}
  Arguments:
{4}
  Output Type: {5}</value>
  </data>
  <data name="PostCreating" xml:space="preserve">
    <value>Storage "{0}" is storing new Post.
  Activity: {1}</value>
  </data>
  <data name="PostGetting" xml:space="preserve">
    <value>Storage "{0}" is generating Post from data row.
  Row: {1}</value>
  </data>
  <data name="PostsLoading" xml:space="preserve">
    <value>Storage "{0}" is loading data rows from Posts table.
  Query: SELECT ... {1}</value>
  </data>
  <data name="ReplyElementCreating" xml:space="preserve">
    <value>Storage "{0}" is storing new ReplyElement.
  Post: {1}
  InReplyToPost: {2}</value>
  </data>
  <data name="ReplyElementGetting" xml:space="preserve">
    <value>Storage "{0}" is generating ReplyElement from data row.
  Row: {1}</value>
  </data>
  <data name="ReplyMapLoading" xml:space="preserve">
    <value>Storage "{0}" is loading data rows from ReplyMap table.
  Query: SELECT ... {1}</value>
  </data>
  <data name="ServantAborted" xml:space="preserve">
    <value>Servant "{0}" was aborted.</value>
  </data>
  <data name="ServantAborting" xml:space="preserve">
    <value>Servant "{0}" was aborting.</value>
  </data>
  <data name="ServantStarted" xml:space="preserve">
    <value>Servant "{0}" was started.</value>
  </data>
  <data name="ServantStarting" xml:space="preserve">
    <value>Servant "{0}" was starting.</value>
  </data>
  <data name="ServantStopped" xml:space="preserve">
    <value>Servant "{0}" was stopped.</value>
  </data>
  <data name="ServantStopping" xml:space="preserve">
    <value>Servant "{0}" was stopping.</value>
  </data>
  <data name="ServerInitialized" xml:space="preserve">
    <value>MetaTweet Server was initialized.</value>
  </data>
  <data name="ServerInitializing" xml:space="preserve">
    <value>MetaTweet {0} ({1}: {2})
    Committed by {3} &lt;{4}&gt; at {5}
MetaTweet Server version {6} on {7} ({8}) is initializing.
Copyright c 2008-2009 Takeshi KIRIYA, XSpect Project &lt;takeshik@users.sf.net&gt;, All rights reserved.
This program comes with ABSOLUTELY NO WARRANTY and this is free software, and you are welcome to
redistribute it under certain conditions; access &lt;http://www.metatweet.org/wiki/Copying&gt; for details.</value>
  </data>
  <data name="ServerPausing" xml:space="preserve">
    <value>MetaTweet Server is pausing.</value>
  </data>
  <data name="ServerRequestExecuted" xml:space="preserve">
    <value>MetaTweet Server finished to execute request "{0}".</value>
  </data>
  <data name="ServerRequestExecuting" xml:space="preserve">
    <value>MetaTweet Server is executing request "{0}".</value>
  </data>
  <data name="ServerResuming" xml:space="preserve">
    <value>MetaTweet Server is resuming.</value>
  </data>
  <data name="ServerRuntimeFileRemains" xml:space="preserve">
    <value>MetaTweet Server would be exited not cleanly last time.</value>
  </data>
  <data name="ServerStarted" xml:space="preserve">
    <value>MetaTweet Server was started.</value>
  </data>
  <data name="ServerStarting" xml:space="preserve">
    <value>MetaTweet Server is starting.</value>
  </data>
  <data name="ServerStopped" xml:space="preserve">
    <value>MetaTweet Server was stopped.</value>
  </data>
  <data name="ServerStopping" xml:space="preserve">
    <value>MetaTweet Server is stopping.</value>
  </data>
  <data name="ServerTerminated" xml:space="preserve">
    <value>MetaTweet Server is terminated.</value>
  </data>
  <data name="ServerTerminating" xml:space="preserve">
    <value>MetaTweet Server is terminating.</value>
  </data>
  <data name="TagElementCreating" xml:space="preserve">
    <value>Storage "{0}" is storing new TagElement.
  Activity: {1}
  Tag: {2}</value>
  </data>
  <data name="TagElementGetting" xml:space="preserve">
    <value>Storage "{0}" is generating TagElement from data row.
  Row: {1}</value>
  </data>
  <data name="TagMapLoading" xml:space="preserve">
    <value>Storage "{0}" is loading data rows from TagMap table.
  Query: SELECT ... {1}</value>
  </data>
</root>