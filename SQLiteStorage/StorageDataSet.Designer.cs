//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:2.0.50727.3053
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// このファイルには、生成された TableAdapter クラスが含まれます。 
// 厳密に型指定されたデータセット クラスが MetaTweetObjectModel プロジェクトにあります。
//
#pragma warning disable 1591

namespace XSpect.MetaTweet.StorageDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class AccountsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Accounts";
            tableMapping.ColumnMappings.Add("AccountId", "AccountId");
            tableMapping.ColumnMappings.Add("Realm", "Realm");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Accounts] WHERE (([AccountId] = @Original_AccountId) AND ([Realm] = " +
                "@Original_Realm))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_AccountId";
            param.DbType = global::System.Data.DbType.Guid;
            param.DbType = global::System.Data.DbType.Guid;
            param.SourceColumn = "AccountId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Realm";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Realm";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [Accounts] ([AccountId], [Realm]) VALUES (@AccountId, @Realm)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@AccountId";
            param.DbType = global::System.Data.DbType.Guid;
            param.DbType = global::System.Data.DbType.Guid;
            param.SourceColumn = "AccountId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Realm";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Realm";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [Accounts] SET [AccountId] = @AccountId, [Realm] = @Realm WHERE (([Account" +
                "Id] = @Original_AccountId) AND ([Realm] = @Original_Realm))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@AccountId";
            param.DbType = global::System.Data.DbType.Guid;
            param.DbType = global::System.Data.DbType.Guid;
            param.SourceColumn = "AccountId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Realm";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Realm";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_AccountId";
            param.DbType = global::System.Data.DbType.Guid;
            param.DbType = global::System.Data.DbType.Guid;
            param.SourceColumn = "AccountId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Realm";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Realm";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = this._connectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [Accounts].* FROM [Accounts]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(XSpect.MetaTweet.StorageDataSet.AccountsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual XSpect.MetaTweet.StorageDataSet.AccountsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            XSpect.MetaTweet.StorageDataSet.AccountsDataTable dataTable = new XSpect.MetaTweet.StorageDataSet.AccountsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XSpect.MetaTweet.StorageDataSet.AccountsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XSpect.MetaTweet.StorageDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Accounts");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Guid Original_AccountId, string Original_Realm) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_AccountId));
            if ((Original_Realm == null)) {
                throw new global::System.ArgumentNullException("Original_Realm");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Realm));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Guid AccountId, string Realm) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(AccountId));
            if ((Realm == null)) {
                throw new global::System.ArgumentNullException("Realm");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Realm));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.Guid AccountId, string Realm, System.Guid Original_AccountId, string Original_Realm) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(AccountId));
            if ((Realm == null)) {
                throw new global::System.ArgumentNullException("Realm");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Realm));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((System.Guid)(Original_AccountId));
            if ((Original_Realm == null)) {
                throw new global::System.ArgumentNullException("Original_Realm");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_Realm));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Realm, System.Guid Original_AccountId, string Original_Realm) {
            return this.Update(Original_AccountId, Realm, Original_AccountId, Original_Realm);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ActivitiesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Activities";
            tableMapping.ColumnMappings.Add("AccountId", "AccountId");
            tableMapping.ColumnMappings.Add("Timestamp", "Timestamp");
            tableMapping.ColumnMappings.Add("Category", "Category");
            tableMapping.ColumnMappings.Add("Value", "Value");
            tableMapping.ColumnMappings.Add("Data", "Data");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [Activities] WHERE (([AccountId] = @Original_AccountId) AND ([Timestamp] = @Original_Timestamp) AND ([Category] = @Original_Category) AND ((@IsNull_Value = 1 AND [Value] IS NULL) OR ([Value] = @Original_Value)) AND ((@IsNull_Data = 1 AND [Data] IS NULL) OR ([Data] = @Original_Data)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_AccountId";
            param.DbType = global::System.Data.DbType.Guid;
            param.DbType = global::System.Data.DbType.Guid;
            param.SourceColumn = "AccountId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Timestamp";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "Timestamp";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Category";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Category";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Value";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Value";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Value";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Value";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Data";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Data";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Data";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "Data";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [Activities] ([AccountId], [Timestamp], [Category], [Value], [Data]) " +
                "VALUES (@AccountId, @Timestamp, @Category, @Value, @Data)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@AccountId";
            param.DbType = global::System.Data.DbType.Guid;
            param.DbType = global::System.Data.DbType.Guid;
            param.SourceColumn = "AccountId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Timestamp";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "Timestamp";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Category";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Category";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Value";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Value";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Data";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "Data";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [Activities] SET [AccountId] = @AccountId, [Timestamp] = @Timestamp, [Category] = @Category, [Value] = @Value, [Data] = @Data WHERE (([AccountId] = @Original_AccountId) AND ([Timestamp] = @Original_Timestamp) AND ([Category] = @Original_Category) AND ((@IsNull_Value = 1 AND [Value] IS NULL) OR ([Value] = @Original_Value)) AND ((@IsNull_Data = 1 AND [Data] IS NULL) OR ([Data] = @Original_Data)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@AccountId";
            param.DbType = global::System.Data.DbType.Guid;
            param.DbType = global::System.Data.DbType.Guid;
            param.SourceColumn = "AccountId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Timestamp";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "Timestamp";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Category";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Category";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Value";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Value";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Data";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "Data";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_AccountId";
            param.DbType = global::System.Data.DbType.Guid;
            param.DbType = global::System.Data.DbType.Guid;
            param.SourceColumn = "AccountId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Timestamp";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "Timestamp";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Category";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Category";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Value";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Value";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Value";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Value";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Data";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Data";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Data";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "Data";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = this._connectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [Activities].* FROM [Activities]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(XSpect.MetaTweet.StorageDataSet.ActivitiesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual XSpect.MetaTweet.StorageDataSet.ActivitiesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            XSpect.MetaTweet.StorageDataSet.ActivitiesDataTable dataTable = new XSpect.MetaTweet.StorageDataSet.ActivitiesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XSpect.MetaTweet.StorageDataSet.ActivitiesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XSpect.MetaTweet.StorageDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Activities");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Guid Original_AccountId, System.DateTime Original_Timestamp, string Original_Category, string Original_Value, byte[] Original_Data) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_AccountId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((System.DateTime)(Original_Timestamp));
            if ((Original_Category == null)) {
                throw new global::System.ArgumentNullException("Original_Category");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Category));
            }
            if ((Original_Value == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Value));
            }
            if ((Original_Data == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((byte[])(Original_Data));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Guid AccountId, System.DateTime Timestamp, string Category, string Value, byte[] Data) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(AccountId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(Timestamp));
            if ((Category == null)) {
                throw new global::System.ArgumentNullException("Category");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Category));
            }
            if ((Value == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Value));
            }
            if ((Data == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((byte[])(Data));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.Guid AccountId, System.DateTime Timestamp, string Category, string Value, byte[] Data, System.Guid Original_AccountId, System.DateTime Original_Timestamp, string Original_Category, string Original_Value, byte[] Original_Data) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(AccountId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(Timestamp));
            if ((Category == null)) {
                throw new global::System.ArgumentNullException("Category");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Category));
            }
            if ((Value == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Value));
            }
            if ((Data == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((byte[])(Data));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((System.Guid)(Original_AccountId));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(Original_Timestamp));
            if ((Original_Category == null)) {
                throw new global::System.ArgumentNullException("Original_Category");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_Category));
            }
            if ((Original_Value == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_Value));
            }
            if ((Original_Data == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((byte[])(Original_Data));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Value, byte[] Data, System.Guid Original_AccountId, System.DateTime Original_Timestamp, string Original_Category, string Original_Value, byte[] Original_Data) {
            return this.Update(Original_AccountId, Original_Timestamp, Original_Category, Value, Data, Original_AccountId, Original_Timestamp, Original_Category, Original_Value, Original_Data);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FollowMapTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FollowMap";
            tableMapping.ColumnMappings.Add("AccountId", "AccountId");
            tableMapping.ColumnMappings.Add("FollowingAccountId", "FollowingAccountId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [FollowMap] WHERE (([AccountId] = @Original_AccountId) AND ([Followin" +
                "gAccountId] = @Original_FollowingAccountId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_AccountId";
            param.DbType = global::System.Data.DbType.Guid;
            param.DbType = global::System.Data.DbType.Guid;
            param.SourceColumn = "AccountId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FollowingAccountId";
            param.DbType = global::System.Data.DbType.Guid;
            param.DbType = global::System.Data.DbType.Guid;
            param.SourceColumn = "FollowingAccountId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [FollowMap] ([AccountId], [FollowingAccountId]) VALUES (@AccountId, @" +
                "FollowingAccountId)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@AccountId";
            param.DbType = global::System.Data.DbType.Guid;
            param.DbType = global::System.Data.DbType.Guid;
            param.SourceColumn = "AccountId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FollowingAccountId";
            param.DbType = global::System.Data.DbType.Guid;
            param.DbType = global::System.Data.DbType.Guid;
            param.SourceColumn = "FollowingAccountId";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [FollowMap] SET [AccountId] = @AccountId, [FollowingAccountId] = @Followin" +
                "gAccountId WHERE (([AccountId] = @Original_AccountId) AND ([FollowingAccountId] " +
                "= @Original_FollowingAccountId))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@AccountId";
            param.DbType = global::System.Data.DbType.Guid;
            param.DbType = global::System.Data.DbType.Guid;
            param.SourceColumn = "AccountId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FollowingAccountId";
            param.DbType = global::System.Data.DbType.Guid;
            param.DbType = global::System.Data.DbType.Guid;
            param.SourceColumn = "FollowingAccountId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_AccountId";
            param.DbType = global::System.Data.DbType.Guid;
            param.DbType = global::System.Data.DbType.Guid;
            param.SourceColumn = "AccountId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FollowingAccountId";
            param.DbType = global::System.Data.DbType.Guid;
            param.DbType = global::System.Data.DbType.Guid;
            param.SourceColumn = "FollowingAccountId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = this._connectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [FollowMap].* FROM [FollowMap]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(XSpect.MetaTweet.StorageDataSet.FollowMapDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual XSpect.MetaTweet.StorageDataSet.FollowMapDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            XSpect.MetaTweet.StorageDataSet.FollowMapDataTable dataTable = new XSpect.MetaTweet.StorageDataSet.FollowMapDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XSpect.MetaTweet.StorageDataSet.FollowMapDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XSpect.MetaTweet.StorageDataSet dataSet) {
            return this.Adapter.Update(dataSet, "FollowMap");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Guid Original_AccountId, System.Guid Original_FollowingAccountId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_AccountId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((System.Guid)(Original_FollowingAccountId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Guid AccountId, System.Guid FollowingAccountId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(AccountId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((System.Guid)(FollowingAccountId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.Guid AccountId, System.Guid FollowingAccountId, System.Guid Original_AccountId, System.Guid Original_FollowingAccountId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(AccountId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((System.Guid)(FollowingAccountId));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((System.Guid)(Original_AccountId));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.Guid)(Original_FollowingAccountId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.Guid Original_AccountId, System.Guid Original_FollowingAccountId) {
            return this.Update(Original_AccountId, Original_FollowingAccountId, Original_AccountId, Original_FollowingAccountId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PostsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Posts";
            tableMapping.ColumnMappings.Add("AccountId", "AccountId");
            tableMapping.ColumnMappings.Add("Timestamp", "Timestamp");
            tableMapping.ColumnMappings.Add("PostId", "PostId");
            tableMapping.ColumnMappings.Add("Text", "Text");
            tableMapping.ColumnMappings.Add("Source", "Source");
            tableMapping.ColumnMappings.Add("FavoriteCount", "FavoriteCount");
            tableMapping.ColumnMappings.Add("IsFavorited", "IsFavorited");
            tableMapping.ColumnMappings.Add("IsRestricted", "IsRestricted");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [Posts] WHERE (([AccountId] = @Original_AccountId) AND ([Timestamp] = @Original_Timestamp) AND ([PostId] = @Original_PostId) AND ([Text] = @Original_Text) AND ([Source] = @Original_Source) AND ((@IsNull_FavoriteCount = 1 AND [FavoriteCount] IS NULL) OR ([FavoriteCount] = @Original_FavoriteCount)) AND ([IsFavorited] = @Original_IsFavorited) AND ([IsRestricted] = @Original_IsRestricted))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_AccountId";
            param.DbType = global::System.Data.DbType.Guid;
            param.DbType = global::System.Data.DbType.Guid;
            param.SourceColumn = "AccountId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Timestamp";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "Timestamp";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PostId";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "PostId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Text";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Text";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Source";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Source";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FavoriteCount";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FavoriteCount";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FavoriteCount";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FavoriteCount";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_IsFavorited";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "IsFavorited";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_IsRestricted";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "IsRestricted";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [Posts] ([AccountId], [Timestamp], [PostId], [Text], [Source], [Favor" +
                "iteCount], [IsFavorited], [IsRestricted]) VALUES (@AccountId, @Timestamp, @PostI" +
                "d, @Text, @Source, @FavoriteCount, @IsFavorited, @IsRestricted)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@AccountId";
            param.DbType = global::System.Data.DbType.Guid;
            param.DbType = global::System.Data.DbType.Guid;
            param.SourceColumn = "AccountId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Timestamp";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "Timestamp";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PostId";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "PostId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Text";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Text";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Source";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Source";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FavoriteCount";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FavoriteCount";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsFavorited";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "IsFavorited";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsRestricted";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "IsRestricted";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [Posts] SET [AccountId] = @AccountId, [Timestamp] = @Timestamp, [PostId] = @PostId, [Text] = @Text, [Source] = @Source, [FavoriteCount] = @FavoriteCount, [IsFavorited] = @IsFavorited, [IsRestricted] = @IsRestricted WHERE (([AccountId] = @Original_AccountId) AND ([Timestamp] = @Original_Timestamp) AND ([PostId] = @Original_PostId) AND ([Text] = @Original_Text) AND ([Source] = @Original_Source) AND ((@IsNull_FavoriteCount = 1 AND [FavoriteCount] IS NULL) OR ([FavoriteCount] = @Original_FavoriteCount)) AND ([IsFavorited] = @Original_IsFavorited) AND ([IsRestricted] = @Original_IsRestricted))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@AccountId";
            param.DbType = global::System.Data.DbType.Guid;
            param.DbType = global::System.Data.DbType.Guid;
            param.SourceColumn = "AccountId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Timestamp";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "Timestamp";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PostId";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "PostId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Text";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Text";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Source";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Source";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FavoriteCount";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FavoriteCount";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsFavorited";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "IsFavorited";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsRestricted";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "IsRestricted";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_AccountId";
            param.DbType = global::System.Data.DbType.Guid;
            param.DbType = global::System.Data.DbType.Guid;
            param.SourceColumn = "AccountId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Timestamp";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "Timestamp";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PostId";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "PostId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Text";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Text";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Source";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Source";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FavoriteCount";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FavoriteCount";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FavoriteCount";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FavoriteCount";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_IsFavorited";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "IsFavorited";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_IsRestricted";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "IsRestricted";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = this._connectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [Posts].* FROM [Posts]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(XSpect.MetaTweet.StorageDataSet.PostsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual XSpect.MetaTweet.StorageDataSet.PostsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            XSpect.MetaTweet.StorageDataSet.PostsDataTable dataTable = new XSpect.MetaTweet.StorageDataSet.PostsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XSpect.MetaTweet.StorageDataSet.PostsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XSpect.MetaTweet.StorageDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Posts");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Guid Original_AccountId, System.DateTime Original_Timestamp, string Original_PostId, string Original_Text, string Original_Source, global::System.Nullable<int> Original_FavoriteCount, bool Original_IsFavorited, bool Original_IsRestricted) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_AccountId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((System.DateTime)(Original_Timestamp));
            if ((Original_PostId == null)) {
                throw new global::System.ArgumentNullException("Original_PostId");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_PostId));
            }
            if ((Original_Text == null)) {
                throw new global::System.ArgumentNullException("Original_Text");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Text));
            }
            if ((Original_Source == null)) {
                throw new global::System.ArgumentNullException("Original_Source");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Source));
            }
            if ((Original_FavoriteCount.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_FavoriteCount.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[7].Value = ((bool)(Original_IsFavorited));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((bool)(Original_IsRestricted));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Guid AccountId, System.DateTime Timestamp, string PostId, string Text, string Source, global::System.Nullable<int> FavoriteCount, bool IsFavorited, bool IsRestricted) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(AccountId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(Timestamp));
            if ((PostId == null)) {
                throw new global::System.ArgumentNullException("PostId");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(PostId));
            }
            if ((Text == null)) {
                throw new global::System.ArgumentNullException("Text");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Text));
            }
            if ((Source == null)) {
                throw new global::System.ArgumentNullException("Source");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Source));
            }
            if ((FavoriteCount.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(FavoriteCount.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[6].Value = ((bool)(IsFavorited));
            this.Adapter.InsertCommand.Parameters[7].Value = ((bool)(IsRestricted));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    System.Guid AccountId, 
                    System.DateTime Timestamp, 
                    string PostId, 
                    string Text, 
                    string Source, 
                    global::System.Nullable<int> FavoriteCount, 
                    bool IsFavorited, 
                    bool IsRestricted, 
                    System.Guid Original_AccountId, 
                    System.DateTime Original_Timestamp, 
                    string Original_PostId, 
                    string Original_Text, 
                    string Original_Source, 
                    global::System.Nullable<int> Original_FavoriteCount, 
                    bool Original_IsFavorited, 
                    bool Original_IsRestricted) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(AccountId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(Timestamp));
            if ((PostId == null)) {
                throw new global::System.ArgumentNullException("PostId");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(PostId));
            }
            if ((Text == null)) {
                throw new global::System.ArgumentNullException("Text");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Text));
            }
            if ((Source == null)) {
                throw new global::System.ArgumentNullException("Source");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Source));
            }
            if ((FavoriteCount.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(FavoriteCount.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((bool)(IsFavorited));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((bool)(IsRestricted));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((System.Guid)(Original_AccountId));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((System.DateTime)(Original_Timestamp));
            if ((Original_PostId == null)) {
                throw new global::System.ArgumentNullException("Original_PostId");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_PostId));
            }
            if ((Original_Text == null)) {
                throw new global::System.ArgumentNullException("Original_Text");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_Text));
            }
            if ((Original_Source == null)) {
                throw new global::System.ArgumentNullException("Original_Source");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_Source));
            }
            if ((Original_FavoriteCount.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_FavoriteCount.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[15].Value = ((bool)(Original_IsFavorited));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((bool)(Original_IsRestricted));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Text, string Source, global::System.Nullable<int> FavoriteCount, bool IsFavorited, bool IsRestricted, System.Guid Original_AccountId, System.DateTime Original_Timestamp, string Original_PostId, string Original_Text, string Original_Source, global::System.Nullable<int> Original_FavoriteCount, bool Original_IsFavorited, bool Original_IsRestricted) {
            return this.Update(Original_AccountId, Original_Timestamp, Original_PostId, Text, Source, FavoriteCount, IsFavorited, IsRestricted, Original_AccountId, Original_Timestamp, Original_PostId, Original_Text, Original_Source, Original_FavoriteCount, Original_IsFavorited, Original_IsRestricted);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ReplyMapTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ReplyMap";
            tableMapping.ColumnMappings.Add("AccountId", "AccountId");
            tableMapping.ColumnMappings.Add("Timestamp", "Timestamp");
            tableMapping.ColumnMappings.Add("PostId", "PostId");
            tableMapping.ColumnMappings.Add("InReplyToAccountId", "InReplyToAccountId");
            tableMapping.ColumnMappings.Add("InReplyToTimestamp", "InReplyToTimestamp");
            tableMapping.ColumnMappings.Add("InReplyToPostId", "InReplyToPostId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [ReplyMap] WHERE (([AccountId] = @Original_AccountId) AND ([Timestamp] = @Original_Timestamp) AND ([PostId] = @Original_PostId) AND ([InReplyToAccountId] = @Original_InReplyToAccountId) AND ([InReplyToTimestamp] = @Original_InReplyToTimestamp) AND ([InReplyToPostId] = @Original_InReplyToPostId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_AccountId";
            param.DbType = global::System.Data.DbType.Guid;
            param.DbType = global::System.Data.DbType.Guid;
            param.SourceColumn = "AccountId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Timestamp";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "Timestamp";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PostId";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "PostId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_InReplyToAccountId";
            param.DbType = global::System.Data.DbType.Guid;
            param.DbType = global::System.Data.DbType.Guid;
            param.SourceColumn = "InReplyToAccountId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_InReplyToTimestamp";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "InReplyToTimestamp";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_InReplyToPostId";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "InReplyToPostId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [ReplyMap] ([AccountId], [Timestamp], [PostId], [InReplyToAccountId]," +
                " [InReplyToTimestamp], [InReplyToPostId]) VALUES (@AccountId, @Timestamp, @PostI" +
                "d, @InReplyToAccountId, @InReplyToTimestamp, @InReplyToPostId)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@AccountId";
            param.DbType = global::System.Data.DbType.Guid;
            param.DbType = global::System.Data.DbType.Guid;
            param.SourceColumn = "AccountId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Timestamp";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "Timestamp";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PostId";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "PostId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@InReplyToAccountId";
            param.DbType = global::System.Data.DbType.Guid;
            param.DbType = global::System.Data.DbType.Guid;
            param.SourceColumn = "InReplyToAccountId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@InReplyToTimestamp";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "InReplyToTimestamp";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@InReplyToPostId";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "InReplyToPostId";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [ReplyMap] SET [AccountId] = @AccountId, [Timestamp] = @Timestamp, [PostId] = @PostId, [InReplyToAccountId] = @InReplyToAccountId, [InReplyToTimestamp] = @InReplyToTimestamp, [InReplyToPostId] = @InReplyToPostId WHERE (([AccountId] = @Original_AccountId) AND ([Timestamp] = @Original_Timestamp) AND ([PostId] = @Original_PostId) AND ([InReplyToAccountId] = @Original_InReplyToAccountId) AND ([InReplyToTimestamp] = @Original_InReplyToTimestamp) AND ([InReplyToPostId] = @Original_InReplyToPostId))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@AccountId";
            param.DbType = global::System.Data.DbType.Guid;
            param.DbType = global::System.Data.DbType.Guid;
            param.SourceColumn = "AccountId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Timestamp";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "Timestamp";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PostId";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "PostId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@InReplyToAccountId";
            param.DbType = global::System.Data.DbType.Guid;
            param.DbType = global::System.Data.DbType.Guid;
            param.SourceColumn = "InReplyToAccountId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@InReplyToTimestamp";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "InReplyToTimestamp";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@InReplyToPostId";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "InReplyToPostId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_AccountId";
            param.DbType = global::System.Data.DbType.Guid;
            param.DbType = global::System.Data.DbType.Guid;
            param.SourceColumn = "AccountId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Timestamp";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "Timestamp";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PostId";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "PostId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_InReplyToAccountId";
            param.DbType = global::System.Data.DbType.Guid;
            param.DbType = global::System.Data.DbType.Guid;
            param.SourceColumn = "InReplyToAccountId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_InReplyToTimestamp";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "InReplyToTimestamp";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_InReplyToPostId";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "InReplyToPostId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = this._connectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT AccountId, [Timestamp], PostId, InReplyToAccountId, InReplyToTimestamp, In" +
                "ReplyToPostId FROM ReplyMap";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(XSpect.MetaTweet.StorageDataSet.ReplyMapDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual XSpect.MetaTweet.StorageDataSet.ReplyMapDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            XSpect.MetaTweet.StorageDataSet.ReplyMapDataTable dataTable = new XSpect.MetaTweet.StorageDataSet.ReplyMapDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XSpect.MetaTweet.StorageDataSet.ReplyMapDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XSpect.MetaTweet.StorageDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ReplyMap");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Guid Original_AccountId, System.DateTime Original_Timestamp, string Original_PostId, System.Guid Original_InReplyToAccountId, System.DateTime Original_InReplyToTimestamp, string Original_InReplyToPostId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_AccountId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((System.DateTime)(Original_Timestamp));
            if ((Original_PostId == null)) {
                throw new global::System.ArgumentNullException("Original_PostId");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_PostId));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((System.Guid)(Original_InReplyToAccountId));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_InReplyToTimestamp));
            if ((Original_InReplyToPostId == null)) {
                throw new global::System.ArgumentNullException("Original_InReplyToPostId");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_InReplyToPostId));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Guid AccountId, System.DateTime Timestamp, string PostId, System.Guid InReplyToAccountId, System.DateTime InReplyToTimestamp, string InReplyToPostId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(AccountId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(Timestamp));
            if ((PostId == null)) {
                throw new global::System.ArgumentNullException("PostId");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(PostId));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.Guid)(InReplyToAccountId));
            this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(InReplyToTimestamp));
            if ((InReplyToPostId == null)) {
                throw new global::System.ArgumentNullException("InReplyToPostId");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(InReplyToPostId));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.Guid AccountId, System.DateTime Timestamp, string PostId, System.Guid InReplyToAccountId, System.DateTime InReplyToTimestamp, string InReplyToPostId, System.Guid Original_AccountId, System.DateTime Original_Timestamp, string Original_PostId, System.Guid Original_InReplyToAccountId, System.DateTime Original_InReplyToTimestamp, string Original_InReplyToPostId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(AccountId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(Timestamp));
            if ((PostId == null)) {
                throw new global::System.ArgumentNullException("PostId");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(PostId));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.Guid)(InReplyToAccountId));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(InReplyToTimestamp));
            if ((InReplyToPostId == null)) {
                throw new global::System.ArgumentNullException("InReplyToPostId");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(InReplyToPostId));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((System.Guid)(Original_AccountId));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((System.DateTime)(Original_Timestamp));
            if ((Original_PostId == null)) {
                throw new global::System.ArgumentNullException("Original_PostId");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_PostId));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((System.Guid)(Original_InReplyToAccountId));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((System.DateTime)(Original_InReplyToTimestamp));
            if ((Original_InReplyToPostId == null)) {
                throw new global::System.ArgumentNullException("Original_InReplyToPostId");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_InReplyToPostId));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.Guid Original_AccountId, System.DateTime Original_Timestamp, string Original_PostId, System.Guid Original_InReplyToAccountId, System.DateTime Original_InReplyToTimestamp, string Original_InReplyToPostId) {
            return this.Update(Original_AccountId, Original_Timestamp, Original_PostId, Original_InReplyToAccountId, Original_InReplyToTimestamp, Original_InReplyToPostId, Original_AccountId, Original_Timestamp, Original_PostId, Original_InReplyToAccountId, Original_InReplyToTimestamp, Original_InReplyToPostId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TagMapTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TagMap";
            tableMapping.ColumnMappings.Add("AccountId", "AccountId");
            tableMapping.ColumnMappings.Add("Timestamp", "Timestamp");
            tableMapping.ColumnMappings.Add("Category", "Category");
            tableMapping.ColumnMappings.Add("Tag", "Tag");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [TagMap] WHERE (([AccountId] = @Original_AccountId) AND ([Timestamp] " +
                "= @Original_Timestamp) AND ([Category] = @Original_Category) AND ([Tag] = @Origi" +
                "nal_Tag))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_AccountId";
            param.DbType = global::System.Data.DbType.Guid;
            param.DbType = global::System.Data.DbType.Guid;
            param.SourceColumn = "AccountId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Timestamp";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "Timestamp";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Category";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Category";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Tag";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Tag";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [TagMap] ([AccountId], [Timestamp], [Category], [Tag]) VALUES (@Accou" +
                "ntId, @Timestamp, @Category, @Tag)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@AccountId";
            param.DbType = global::System.Data.DbType.Guid;
            param.DbType = global::System.Data.DbType.Guid;
            param.SourceColumn = "AccountId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Timestamp";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "Timestamp";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Category";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Category";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Tag";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Tag";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [TagMap] SET [AccountId] = @AccountId, [Timestamp] = @Timestamp, [Category] = @Category, [Tag] = @Tag WHERE (([AccountId] = @Original_AccountId) AND ([Timestamp] = @Original_Timestamp) AND ([Category] = @Original_Category) AND ([Tag] = @Original_Tag))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@AccountId";
            param.DbType = global::System.Data.DbType.Guid;
            param.DbType = global::System.Data.DbType.Guid;
            param.SourceColumn = "AccountId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Timestamp";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "Timestamp";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Category";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Category";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Tag";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Tag";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_AccountId";
            param.DbType = global::System.Data.DbType.Guid;
            param.DbType = global::System.Data.DbType.Guid;
            param.SourceColumn = "AccountId";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Timestamp";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "Timestamp";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Category";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Category";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Tag";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Tag";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = this._connectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [TagMap].* FROM [TagMap]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(XSpect.MetaTweet.StorageDataSet.TagMapDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual XSpect.MetaTweet.StorageDataSet.TagMapDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            XSpect.MetaTweet.StorageDataSet.TagMapDataTable dataTable = new XSpect.MetaTweet.StorageDataSet.TagMapDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XSpect.MetaTweet.StorageDataSet.TagMapDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XSpect.MetaTweet.StorageDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TagMap");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Guid Original_AccountId, System.DateTime Original_Timestamp, string Original_Category, string Original_Tag) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_AccountId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((System.DateTime)(Original_Timestamp));
            if ((Original_Category == null)) {
                throw new global::System.ArgumentNullException("Original_Category");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Category));
            }
            if ((Original_Tag == null)) {
                throw new global::System.ArgumentNullException("Original_Tag");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Tag));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Guid AccountId, System.DateTime Timestamp, string Category, string Tag) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(AccountId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(Timestamp));
            if ((Category == null)) {
                throw new global::System.ArgumentNullException("Category");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Category));
            }
            if ((Tag == null)) {
                throw new global::System.ArgumentNullException("Tag");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Tag));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.Guid AccountId, System.DateTime Timestamp, string Category, string Tag, System.Guid Original_AccountId, System.DateTime Original_Timestamp, string Original_Category, string Original_Tag) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(AccountId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(Timestamp));
            if ((Category == null)) {
                throw new global::System.ArgumentNullException("Category");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Category));
            }
            if ((Tag == null)) {
                throw new global::System.ArgumentNullException("Tag");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Tag));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((System.Guid)(Original_AccountId));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(Original_Timestamp));
            if ((Original_Category == null)) {
                throw new global::System.ArgumentNullException("Original_Category");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_Category));
            }
            if ((Original_Tag == null)) {
                throw new global::System.ArgumentNullException("Original_Tag");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_Tag));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.Guid Original_AccountId, System.DateTime Original_Timestamp, string Original_Category, string Original_Tag) {
            return this.Update(Original_AccountId, Original_Timestamp, Original_Category, Original_Tag, Original_AccountId, Original_Timestamp, Original_Category, Original_Tag);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private AccountsTableAdapter _accountsTableAdapter;
        
        private ActivitiesTableAdapter _activitiesTableAdapter;
        
        private FollowMapTableAdapter _followMapTableAdapter;
        
        private PostsTableAdapter _postsTableAdapter;
        
        private ReplyMapTableAdapter _replyMapTableAdapter;
        
        private TagMapTableAdapter _tagMapTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public AccountsTableAdapter AccountsTableAdapter {
            get {
                return this._accountsTableAdapter;
            }
            set {
                this._accountsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public ActivitiesTableAdapter ActivitiesTableAdapter {
            get {
                return this._activitiesTableAdapter;
            }
            set {
                this._activitiesTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public FollowMapTableAdapter FollowMapTableAdapter {
            get {
                return this._followMapTableAdapter;
            }
            set {
                this._followMapTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public PostsTableAdapter PostsTableAdapter {
            get {
                return this._postsTableAdapter;
            }
            set {
                this._postsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public ReplyMapTableAdapter ReplyMapTableAdapter {
            get {
                return this._replyMapTableAdapter;
            }
            set {
                this._replyMapTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TagMapTableAdapter TagMapTableAdapter {
            get {
                return this._tagMapTableAdapter;
            }
            set {
                this._tagMapTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._accountsTableAdapter != null) 
                            && (this._accountsTableAdapter.Connection != null))) {
                    return this._accountsTableAdapter.Connection;
                }
                if (((this._activitiesTableAdapter != null) 
                            && (this._activitiesTableAdapter.Connection != null))) {
                    return this._activitiesTableAdapter.Connection;
                }
                if (((this._followMapTableAdapter != null) 
                            && (this._followMapTableAdapter.Connection != null))) {
                    return this._followMapTableAdapter.Connection;
                }
                if (((this._postsTableAdapter != null) 
                            && (this._postsTableAdapter.Connection != null))) {
                    return this._postsTableAdapter.Connection;
                }
                if (((this._replyMapTableAdapter != null) 
                            && (this._replyMapTableAdapter.Connection != null))) {
                    return this._replyMapTableAdapter.Connection;
                }
                if (((this._tagMapTableAdapter != null) 
                            && (this._tagMapTableAdapter.Connection != null))) {
                    return this._tagMapTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._accountsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._activitiesTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._followMapTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._postsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._replyMapTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tagMapTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(XSpect.MetaTweet.StorageDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._accountsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Accounts.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._accountsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._activitiesTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Activities.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._activitiesTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._postsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Posts.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._postsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tagMapTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TagMap.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tagMapTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._replyMapTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ReplyMap.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._replyMapTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._followMapTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.FollowMap.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._followMapTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(XSpect.MetaTweet.StorageDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._accountsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Accounts.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._accountsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._activitiesTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Activities.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._activitiesTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._postsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Posts.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._postsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tagMapTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TagMap.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tagMapTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._replyMapTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ReplyMap.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._replyMapTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._followMapTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.FollowMap.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._followMapTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(XSpect.MetaTweet.StorageDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._followMapTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.FollowMap.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._followMapTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._replyMapTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ReplyMap.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._replyMapTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tagMapTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TagMap.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tagMapTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._postsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Posts.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._postsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._activitiesTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Activities.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._activitiesTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._accountsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Accounts.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._accountsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(XSpect.MetaTweet.StorageDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._accountsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._accountsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("TableAdapterManager で管理されるすべての TableAdapter は同一の接続文字列を使用する必要があります。");
            }
            if (((this._activitiesTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._activitiesTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("TableAdapterManager で管理されるすべての TableAdapter は同一の接続文字列を使用する必要があります。");
            }
            if (((this._followMapTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._followMapTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("TableAdapterManager で管理されるすべての TableAdapter は同一の接続文字列を使用する必要があります。");
            }
            if (((this._postsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._postsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("TableAdapterManager で管理されるすべての TableAdapter は同一の接続文字列を使用する必要があります。");
            }
            if (((this._replyMapTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._replyMapTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("TableAdapterManager で管理されるすべての TableAdapter は同一の接続文字列を使用する必要があります。");
            }
            if (((this._tagMapTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tagMapTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("TableAdapterManager で管理されるすべての TableAdapter は同一の接続文字列を使用する必要があります。");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager には接続情報がありません。それぞれの TableAdapterManager TableAdapter プロパティを有効な" +
                        " TableAdapter インスタンスに設定してください。");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("トランザクションを開始できません。現在のデータ接続がトランザクションをサポートしていないか、または現在の状態がトランザクションの開始を許可していません。");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._accountsTableAdapter != null)) {
                    revertConnections.Add(this._accountsTableAdapter, this._accountsTableAdapter.Connection);
                    this._accountsTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._accountsTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._accountsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._accountsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._accountsTableAdapter.Adapter);
                    }
                }
                if ((this._activitiesTableAdapter != null)) {
                    revertConnections.Add(this._activitiesTableAdapter, this._activitiesTableAdapter.Connection);
                    this._activitiesTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._activitiesTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._activitiesTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._activitiesTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._activitiesTableAdapter.Adapter);
                    }
                }
                if ((this._followMapTableAdapter != null)) {
                    revertConnections.Add(this._followMapTableAdapter, this._followMapTableAdapter.Connection);
                    this._followMapTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._followMapTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._followMapTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._followMapTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._followMapTableAdapter.Adapter);
                    }
                }
                if ((this._postsTableAdapter != null)) {
                    revertConnections.Add(this._postsTableAdapter, this._postsTableAdapter.Connection);
                    this._postsTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._postsTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._postsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._postsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._postsTableAdapter.Adapter);
                    }
                }
                if ((this._replyMapTableAdapter != null)) {
                    revertConnections.Add(this._replyMapTableAdapter, this._replyMapTableAdapter.Connection);
                    this._replyMapTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._replyMapTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._replyMapTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._replyMapTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._replyMapTableAdapter.Adapter);
                    }
                }
                if ((this._tagMapTableAdapter != null)) {
                    revertConnections.Add(this._tagMapTableAdapter, this._tagMapTableAdapter.Connection);
                    this._tagMapTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._tagMapTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._tagMapTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tagMapTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tagMapTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._accountsTableAdapter != null)) {
                    this._accountsTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._accountsTableAdapter]));
                    this._accountsTableAdapter.Transaction = null;
                }
                if ((this._activitiesTableAdapter != null)) {
                    this._activitiesTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._activitiesTableAdapter]));
                    this._activitiesTableAdapter.Transaction = null;
                }
                if ((this._followMapTableAdapter != null)) {
                    this._followMapTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._followMapTableAdapter]));
                    this._followMapTableAdapter.Transaction = null;
                }
                if ((this._postsTableAdapter != null)) {
                    this._postsTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._postsTableAdapter]));
                    this._postsTableAdapter.Transaction = null;
                }
                if ((this._replyMapTableAdapter != null)) {
                    this._replyMapTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._replyMapTableAdapter]));
                    this._replyMapTableAdapter.Transaction = null;
                }
                if ((this._tagMapTableAdapter != null)) {
                    this._tagMapTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._tagMapTableAdapter]));
                    this._tagMapTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591