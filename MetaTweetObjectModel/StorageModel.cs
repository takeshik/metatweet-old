//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// HACK: This code was modified by hand.
// You can get all modifications to search "HACK:".

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("MetaTweet", "AccountActivity", "Account", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(XSpect.MetaTweet.Objects.Account), "Activity", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(XSpect.MetaTweet.Objects.Activity), true)]
[assembly: EdmRelationshipAttribute("MetaTweet", "AccountAnnotation", "Account", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(XSpect.MetaTweet.Objects.Account), "Annotation", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(XSpect.MetaTweet.Objects.Annotation), true)]
[assembly: EdmRelationshipAttribute("MetaTweet", "AccountRelation", "Account", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(XSpect.MetaTweet.Objects.Account), "Relation", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(XSpect.MetaTweet.Objects.Relation), true)]
[assembly: EdmRelationshipAttribute("MetaTweet", "AccountMark", "Account", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(XSpect.MetaTweet.Objects.Account), "Mark", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(XSpect.MetaTweet.Objects.Mark), true)]
[assembly: EdmRelationshipAttribute("MetaTweet", "ActivityTag", "Activity", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(XSpect.MetaTweet.Objects.Activity), "Tag", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(XSpect.MetaTweet.Objects.Tag), true)]
[assembly: EdmRelationshipAttribute("MetaTweet", "ActivityReference", "Activity", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(XSpect.MetaTweet.Objects.Activity), "Reference", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(XSpect.MetaTweet.Objects.Reference), true)]
[assembly: EdmRelationshipAttribute("MetaTweet", "ActivityMark", "Activity", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(XSpect.MetaTweet.Objects.Activity), "Mark", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(XSpect.MetaTweet.Objects.Mark), true)]

#endregion

namespace XSpect.MetaTweet.Objects
{
    #region Contexts

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class StorageObjectContext : ObjectContext
    {
        #region Constructors

        /// <summary>
        /// Initializes a new StorageObjectContext object using the connection string found in the 'StorageObjectContext' section of the application configuration file.
        /// </summary>
        public StorageObjectContext()
            : base("name=StorageObjectContext", "StorageObjectContext")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        /// <summary>
        /// Initialize a new StorageObjectContext object.
        /// </summary>
        public StorageObjectContext(string connectionString)
            : base(connectionString, "StorageObjectContext")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        /// <summary>
        /// Initialize a new StorageObjectContext object.
        /// </summary>
        public StorageObjectContext(EntityConnection connection)
            : base(connection, "StorageObjectContext")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        #endregion

        #region Partial Methods

        partial void OnContextCreated();

        #endregion

        #region ObjectSet Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Account> Accounts
        {
            get
            {
                if ((_Accounts == null))
                {
                    _Accounts = base.CreateObjectSet<Account>("Accounts");
                }
                return _Accounts;
            }
        }
        private ObjectSet<Account> _Accounts;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Activity> Activities
        {
            get
            {
                if ((_Activities == null))
                {
                    _Activities = base.CreateObjectSet<Activity>("Activities");
                }
                return _Activities;
            }
        }
        private ObjectSet<Activity> _Activities;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Annotation> Annotations
        {
            get
            {
                if ((_Annotations == null))
                {
                    _Annotations = base.CreateObjectSet<Annotation>("Annotations");
                }
                return _Annotations;
            }
        }
        private ObjectSet<Annotation> _Annotations;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Mark> Marks
        {
            get
            {
                if ((_Marks == null))
                {
                    _Marks = base.CreateObjectSet<Mark>("Marks");
                }
                return _Marks;
            }
        }
        private ObjectSet<Mark> _Marks;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Reference> References
        {
            get
            {
                if ((_References == null))
                {
                    _References = base.CreateObjectSet<Reference>("References");
                }
                return _References;
            }
        }
        private ObjectSet<Reference> _References;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Relation> Relations
        {
            get
            {
                if ((_Relations == null))
                {
                    _Relations = base.CreateObjectSet<Relation>("Relations");
                }
                return _Relations;
            }
        }
        private ObjectSet<Relation> _Relations;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Tag> Tags
        {
            get
            {
                if ((_Tags == null))
                {
                    _Tags = base.CreateObjectSet<Tag>("Tags");
                }
                return _Tags;
            }
        }
        private ObjectSet<Tag> _Tags;

        #endregion
        /* HACK:
        #region AddTo Methods

        /// <summary>
        /// Deprecated Method for adding a new object to the Accounts EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAccounts(Account account)
        {
            base.AddObject("Accounts", account);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Activities EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToActivities(Activity activity)
        {
            base.AddObject("Activities", activity);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Annotations EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAnnotations(Annotation annotation)
        {
            base.AddObject("Annotations", annotation);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Marks EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToMarks(Mark mark)
        {
            base.AddObject("Marks", mark);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the References EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToReferences(Reference reference)
        {
            base.AddObject("References", reference);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Relations EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRelations(Relation relation)
        {
            base.AddObject("Relations", relation);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Tags EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTags(Tag tag)
        {
            base.AddObject("Tags", tag);
        }

        #endregion
        */
    }


    #endregion

    #region Entities

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName = "MetaTweet", Name = "Account")]
    [Serializable()]
    [DataContractAttribute(IsReference = true)]
    public partial class Account : StorageObject // HACK
    {
        /* HACK:
        #region Factory Method

        /// <summary>
        /// Create a new Account object.
        /// </summary>
        /// <param name="accountId">Initial value of the AccountId property.</param>
        /// <param name="realm">Initial value of the Realm property.</param>
        /// <param name="seedString">Initial value of the SeedString property.</param>
        public static Account CreateAccount(global::System.String accountId, global::System.String realm, global::System.String seedString)
        {
            Account account = new Account();
            account.AccountId = accountId;
            account.Realm = realm;
            account.SeedString = seedString;
            return account;
        }

        #endregion
        */
        #region Primitive Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String AccountId
        {
            get
            {
                return _AccountId;
            }
            set
            {
                if (_AccountId != value)
                {
                    OnAccountIdChanging(value);
                    ReportPropertyChanging("AccountId");
                    _AccountId = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("AccountId");
                    OnAccountIdChanged();
                }
            }
        }
        private global::System.String _AccountId;
        partial void OnAccountIdChanging(global::System.String value);
        partial void OnAccountIdChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String Realm
        {
            get
            {
                return _Realm;
            }
            set
            {
                // HACK: Suppress reassigning
                if (this.Realm != null)
                {
                    throw new System.InvalidOperationException("Reassigning to this property is not allowed.");
                }
                OnRealmChanging(value);
                ReportPropertyChanging("Realm");
                _Realm = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Realm");
                OnRealmChanged();
            }
        }
        private global::System.String _Realm;
        partial void OnRealmChanging(global::System.String value);
        partial void OnRealmChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String SeedString
        {
            get
            {
                return _SeedString;
            }
            set
            {
                // HACK: Suppress reassigning
                if (this.SeedString != null)
                {
                    throw new System.InvalidOperationException("Reassigning to this property is not allowed.");
                }
                OnSeedStringChanging(value);
                ReportPropertyChanging("SeedString");
                _SeedString = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("SeedString");
                OnSeedStringChanged();
            }
        }
        private global::System.String _SeedString;
        partial void OnSeedStringChanging(global::System.String value);
        partial void OnSeedStringChanged();

        #endregion

        #region Navigation Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MetaTweet", "AccountActivity", "Activity")]
        public EntityCollection<Activity> Activities
        {
            get
            {
                return ((IEntityWithRelationships) this).RelationshipManager.GetRelatedCollection<Activity>("MetaTweet.AccountActivity", "Activity");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships) this).RelationshipManager.InitializeRelatedCollection<Activity>("MetaTweet.AccountActivity", "Activity", value);
                }
            }
        }

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MetaTweet", "AccountAnnotation", "Annotation")]
        public EntityCollection<Annotation> Annotations
        {
            get
            {
                return ((IEntityWithRelationships) this).RelationshipManager.GetRelatedCollection<Annotation>("MetaTweet.AccountAnnotation", "Annotation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships) this).RelationshipManager.InitializeRelatedCollection<Annotation>("MetaTweet.AccountAnnotation", "Annotation", value);
                }
            }
        }

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MetaTweet", "AccountRelation", "Relation")]
        public EntityCollection<Relation> Relations
        {
            get
            {
                return ((IEntityWithRelationships) this).RelationshipManager.GetRelatedCollection<Relation>("MetaTweet.AccountRelation", "Relation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships) this).RelationshipManager.InitializeRelatedCollection<Relation>("MetaTweet.AccountRelation", "Relation", value);
                }
            }
        }

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MetaTweet", "AccountMark", "Mark")]
        public EntityCollection<Mark> Marks
        {
            get
            {
                return ((IEntityWithRelationships) this).RelationshipManager.GetRelatedCollection<Mark>("MetaTweet.AccountMark", "Mark");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships) this).RelationshipManager.InitializeRelatedCollection<Mark>("MetaTweet.AccountMark", "Mark", value);
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName = "MetaTweet", Name = "Activity")]
    [Serializable()]
    [DataContractAttribute(IsReference = true)]
    public partial class Activity : StorageObject // HACK
    {
        /* HACK:
        #region Factory Method

        /// <summary>
        /// Create a new Activity object.
        /// </summary>
        /// <param name="accountId">Initial value of the AccountId property.</param>
        /// <param name="timestamp">Initial value of the Timestamp property.</param>
        /// <param name="category">Initial value of the Category property.</param>
        /// <param name="subId">Initial value of the SubId property.</param>
        public static Activity CreateActivity(global::System.String accountId, global::System.DateTime timestamp, global::System.String category, global::System.String subId)
        {
            Activity activity = new Activity();
            activity.AccountId = accountId;
            activity.Timestamp = timestamp;
            activity.Category = category;
            activity.SubId = subId;
            return activity;
        }

        #endregion
        */
        #region Primitive Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String AccountId
        {
            get
            {
                return _AccountId;
            }
            set
            {
                if (_AccountId != value)
                {
                    OnAccountIdChanging(value);
                    ReportPropertyChanging("AccountId");
                    _AccountId = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("AccountId");
                    OnAccountIdChanged();
                }
            }
        }
        private global::System.String _AccountId;
        partial void OnAccountIdChanging(global::System.String value);
        partial void OnAccountIdChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.DateTime Timestamp
        {
            get
            {
                return _Timestamp;
            }
            set
            {
                // HACK: Fix the value to be UTC
                switch (value.Kind)
                {
                    case System.DateTimeKind.Unspecified:
                        value = System.DateTime.SpecifyKind(value, System.DateTimeKind.Utc);
                        break;
                    case System.DateTimeKind.Local:
                        value = value.ToUniversalTime();
                        break;
                }
                if (_Timestamp != value)
                {
                    OnTimestampChanging(value);
                    ReportPropertyChanging("Timestamp");
                    _Timestamp = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Timestamp");
                    OnTimestampChanged();
                }
            }
        }
        private global::System.DateTime _Timestamp;
        partial void OnTimestampChanging(global::System.DateTime value);
        partial void OnTimestampChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String Category
        {
            get
            {
                return _Category;
            }
            set
            {
                if (_Category != value)
                {
                    OnCategoryChanging(value);
                    ReportPropertyChanging("Category");
                    _Category = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Category");
                    OnCategoryChanged();
                }
            }
        }
        private global::System.String _Category;
        partial void OnCategoryChanging(global::System.String value);
        partial void OnCategoryChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
                if (_SubId != value)
                {
                    OnSubIdChanging(value);
                    ReportPropertyChanging("SubId");
                    _SubId = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("SubId");
                    OnSubIdChanged();
                }
            }
        }
        private global::System.String _SubId;
        partial void OnSubIdChanging(global::System.String value);
        partial void OnSubIdChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = true)]
        [DataMemberAttribute()]
        public global::System.String UserAgent
        {
            get
            {
                return _UserAgent;
            }
            set
            {
                OnUserAgentChanging(value);
                // HACK: To be thread-safe
                lock (_UserAgentLock)
                {
                    ReportPropertyChanging("UserAgent");
                    _UserAgent = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("UserAgent");
                }
                OnUserAgentChanged();
            }
        }
        private global::System.String _UserAgent;
        private static readonly Object _UserAgentLock = new Object();
        partial void OnUserAgentChanging(global::System.String value);
        partial void OnUserAgentChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = true)]
        [DataMemberAttribute()]
        public global::System.String Value
        {
            get
            {
                return _Value;
            }
            set
            {
                OnValueChanging(value);
                // HACK: To be thread-safe
                lock (_ValueLock)
                {
                    ReportPropertyChanging("Value");
                    _Value = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("Value");
                }
                OnValueChanged();
            }
        }
        private global::System.String _Value;
        private static readonly Object _ValueLock = new Object();
        partial void OnValueChanging(global::System.String value);
        partial void OnValueChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = true)]
        [DataMemberAttribute()]
        public global::System.Byte[] Data
        {
            get
            {
                return StructuralObject.GetValidValue(_Data);
            }
            set
            {
                OnDataChanging(value);
                // HACK: To be thread-safe
                lock (_DataLock)
                {
                    ReportPropertyChanging("Data");
                    _Data = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("Data");
                }
                OnDataChanged();
            }
        }
        private global::System.Byte[] _Data;
        private static readonly Object _DataLock = new Object();
        partial void OnDataChanging(global::System.Byte[] value);
        partial void OnDataChanged();

        #endregion

        #region Navigation Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MetaTweet", "AccountActivity", "Account")]
        public Account Account
        {
            get
            {
                return ((IEntityWithRelationships) this).RelationshipManager.GetRelatedReference<Account>("MetaTweet.AccountActivity", "Account").Value;
            }
            set
            {
                ((IEntityWithRelationships) this).RelationshipManager.GetRelatedReference<Account>("MetaTweet.AccountActivity", "Account").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Account> AccountReference
        {
            get
            {
                return ((IEntityWithRelationships) this).RelationshipManager.GetRelatedReference<Account>("MetaTweet.AccountActivity", "Account");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships) this).RelationshipManager.InitializeRelatedReference<Account>("MetaTweet.AccountActivity", "Account", value);
                }
            }
        }

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MetaTweet", "ActivityTag", "Tag")]
        public EntityCollection<Tag> Tags
        {
            get
            {
                return ((IEntityWithRelationships) this).RelationshipManager.GetRelatedCollection<Tag>("MetaTweet.ActivityTag", "Tag");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships) this).RelationshipManager.InitializeRelatedCollection<Tag>("MetaTweet.ActivityTag", "Tag", value);
                }
            }
        }

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MetaTweet", "ActivityReference", "Reference")]
        public EntityCollection<Reference> References
        {
            get
            {
                return ((IEntityWithRelationships) this).RelationshipManager.GetRelatedCollection<Reference>("MetaTweet.ActivityReference", "Reference");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships) this).RelationshipManager.InitializeRelatedCollection<Reference>("MetaTweet.ActivityReference", "Reference", value);
                }
            }
        }

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MetaTweet", "ActivityMark", "Mark")]
        public EntityCollection<Mark> Marks
        {
            get
            {
                return ((IEntityWithRelationships) this).RelationshipManager.GetRelatedCollection<Mark>("MetaTweet.ActivityMark", "Mark");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships) this).RelationshipManager.InitializeRelatedCollection<Mark>("MetaTweet.ActivityMark", "Mark", value);
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName = "MetaTweet", Name = "Annotation")]
    [Serializable()]
    [DataContractAttribute(IsReference = true)]
    public partial class Annotation : StorageObject // HACK
    {
        /* HACK:
        #region Factory Method

        /// <summary>
        /// Create a new Annotation object.
        /// </summary>
        /// <param name="accountId">Initial value of the AccountId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="value">Initial value of the Value property.</param>
        public static Annotation CreateAnnotation(global::System.String accountId, global::System.String name, global::System.String value)
        {
            Annotation annotation = new Annotation();
            annotation.AccountId = accountId;
            annotation.Name = name;
            annotation.Value = value;
            return annotation;
        }

        #endregion
        */
        #region Primitive Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String AccountId
        {
            get
            {
                return _AccountId;
            }
            set
            {
                if (_AccountId != value)
                {
                    OnAccountIdChanging(value);
                    ReportPropertyChanging("AccountId");
                    _AccountId = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("AccountId");
                    OnAccountIdChanged();
                }
            }
        }
        private global::System.String _AccountId;
        partial void OnAccountIdChanging(global::System.String value);
        partial void OnAccountIdChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if (_Name != value)
                {
                    OnNameChanging(value);
                    ReportPropertyChanging("Name");
                    _Name = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Name");
                    OnNameChanged();
                }
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String Value
        {
            get
            {
                return _Value;
            }
            set
            {
                if (_Value != value)
                {
                    OnValueChanging(value);
                    ReportPropertyChanging("Value");
                    _Value = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Value");
                    OnValueChanged();
                }
            }
        }
        private global::System.String _Value;
        partial void OnValueChanging(global::System.String value);
        partial void OnValueChanged();

        #endregion

        #region Navigation Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MetaTweet", "AccountAnnotation", "Account")]
        public Account Account
        {
            get
            {
                return ((IEntityWithRelationships) this).RelationshipManager.GetRelatedReference<Account>("MetaTweet.AccountAnnotation", "Account").Value;
            }
            set
            {
                ((IEntityWithRelationships) this).RelationshipManager.GetRelatedReference<Account>("MetaTweet.AccountAnnotation", "Account").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Account> AccountReference
        {
            get
            {
                return ((IEntityWithRelationships) this).RelationshipManager.GetRelatedReference<Account>("MetaTweet.AccountAnnotation", "Account");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships) this).RelationshipManager.InitializeRelatedReference<Account>("MetaTweet.AccountAnnotation", "Account", value);
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName = "MetaTweet", Name = "Mark")]
    [Serializable()]
    [DataContractAttribute(IsReference = true)]
    public partial class Mark : StorageObject // HACK
    {
        /* HACK:
        #region Factory Method

        /// <summary>
        /// Create a new Mark object.
        /// </summary>
        /// <param name="accountId">Initial value of the AccountId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="markingAccountId">Initial value of the MarkingAccountId property.</param>
        /// <param name="markingTimestamp">Initial value of the MarkingTimestamp property.</param>
        /// <param name="markingCategory">Initial value of the MarkingCategory property.</param>
        /// <param name="markingSubId">Initial value of the MarkingSubId property.</param>
        public static Mark CreateMark(global::System.String accountId, global::System.String name, global::System.String markingAccountId, global::System.DateTime markingTimestamp, global::System.String markingCategory, global::System.String markingSubId)
        {
            Mark mark = new Mark();
            mark.AccountId = accountId;
            mark.Name = name;
            mark.MarkingAccountId = markingAccountId;
            mark.MarkingTimestamp = markingTimestamp;
            mark.MarkingCategory = markingCategory;
            mark.MarkingSubId = markingSubId;
            return mark;
        }

        #endregion
        */
        #region Primitive Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String AccountId
        {
            get
            {
                return _AccountId;
            }
            set
            {
                if (_AccountId != value)
                {
                    OnAccountIdChanging(value);
                    ReportPropertyChanging("AccountId");
                    _AccountId = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("AccountId");
                    OnAccountIdChanged();
                }
            }
        }
        private global::System.String _AccountId;
        partial void OnAccountIdChanging(global::System.String value);
        partial void OnAccountIdChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if (_Name != value)
                {
                    OnNameChanging(value);
                    ReportPropertyChanging("Name");
                    _Name = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Name");
                    OnNameChanged();
                }
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String MarkingAccountId
        {
            get
            {
                return _MarkingAccountId;
            }
            set
            {
                if (_MarkingAccountId != value)
                {
                    OnMarkingAccountIdChanging(value);
                    ReportPropertyChanging("MarkingAccountId");
                    _MarkingAccountId = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("MarkingAccountId");
                    OnMarkingAccountIdChanged();
                }
            }
        }
        private global::System.String _MarkingAccountId;
        partial void OnMarkingAccountIdChanging(global::System.String value);
        partial void OnMarkingAccountIdChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.DateTime MarkingTimestamp
        {
            get
            {
                return _MarkingTimestamp;
            }
            set
            {
                // HACK: Fix the value to be UTC
                switch (value.Kind)
                {
                    case System.DateTimeKind.Unspecified:
                        value = System.DateTime.SpecifyKind(value, System.DateTimeKind.Utc);
                        break;
                    case System.DateTimeKind.Local:
                        value = value.ToUniversalTime();
                        break;
                }
                if (_MarkingTimestamp != value)
                {
                    OnMarkingTimestampChanging(value);
                    ReportPropertyChanging("MarkingTimestamp");
                    _MarkingTimestamp = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("MarkingTimestamp");
                    OnMarkingTimestampChanged();
                }
            }
        }
        private global::System.DateTime _MarkingTimestamp;
        partial void OnMarkingTimestampChanging(global::System.DateTime value);
        partial void OnMarkingTimestampChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String MarkingCategory
        {
            get
            {
                return _MarkingCategory;
            }
            set
            {
                if (_MarkingCategory != value)
                {
                    OnMarkingCategoryChanging(value);
                    ReportPropertyChanging("MarkingCategory");
                    _MarkingCategory = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("MarkingCategory");
                    OnMarkingCategoryChanged();
                }
            }
        }
        private global::System.String _MarkingCategory;
        partial void OnMarkingCategoryChanging(global::System.String value);
        partial void OnMarkingCategoryChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String MarkingSubId
        {
            get
            {
                return _MarkingSubId;
            }
            set
            {
                if (_MarkingSubId != value)
                {
                    OnMarkingSubIdChanging(value);
                    ReportPropertyChanging("MarkingSubId");
                    _MarkingSubId = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("MarkingSubId");
                    OnMarkingSubIdChanged();
                }
            }
        }
        private global::System.String _MarkingSubId;
        partial void OnMarkingSubIdChanging(global::System.String value);
        partial void OnMarkingSubIdChanged();

        #endregion

        #region Navigation Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MetaTweet", "AccountMark", "Account")]
        public Account Account
        {
            get
            {
                return ((IEntityWithRelationships) this).RelationshipManager.GetRelatedReference<Account>("MetaTweet.AccountMark", "Account").Value;
            }
            set
            {
                ((IEntityWithRelationships) this).RelationshipManager.GetRelatedReference<Account>("MetaTweet.AccountMark", "Account").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Account> AccountReference
        {
            get
            {
                return ((IEntityWithRelationships) this).RelationshipManager.GetRelatedReference<Account>("MetaTweet.AccountMark", "Account");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships) this).RelationshipManager.InitializeRelatedReference<Account>("MetaTweet.AccountMark", "Account", value);
                }
            }
        }

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MetaTweet", "ActivityMark", "Activity")]
        public Activity MarkingActivity
        {
            get
            {
                return ((IEntityWithRelationships) this).RelationshipManager.GetRelatedReference<Activity>("MetaTweet.ActivityMark", "Activity").Value;
            }
            set
            {
                ((IEntityWithRelationships) this).RelationshipManager.GetRelatedReference<Activity>("MetaTweet.ActivityMark", "Activity").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Activity> MarkingActivityReference
        {
            get
            {
                return ((IEntityWithRelationships) this).RelationshipManager.GetRelatedReference<Activity>("MetaTweet.ActivityMark", "Activity");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships) this).RelationshipManager.InitializeRelatedReference<Activity>("MetaTweet.ActivityMark", "Activity", value);
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName = "MetaTweet", Name = "Reference")]
    [Serializable()]
    [DataContractAttribute(IsReference = true)]
    public partial class Reference : StorageObject // HACK
    {
        /* HACK:
        #region Factory Method

        /// <summary>
        /// Create a new Reference object.
        /// </summary>
        /// <param name="accountId">Initial value of the AccountId property.</param>
        /// <param name="timestamp">Initial value of the Timestamp property.</param>
        /// <param name="category">Initial value of the Category property.</param>
        /// <param name="subId">Initial value of the SubId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="referringAccountId">Initial value of the ReferringAccountId property.</param>
        /// <param name="referringTimestamp">Initial value of the ReferringTimestamp property.</param>
        /// <param name="referringCategory">Initial value of the ReferringCategory property.</param>
        /// <param name="referringSubId">Initial value of the ReferringSubId property.</param>
        public static Reference CreateReference(global::System.String accountId, global::System.DateTime timestamp, global::System.String category, global::System.String subId, global::System.String name, global::System.String referringAccountId, global::System.DateTime referringTimestamp, global::System.String referringCategory, global::System.String referringSubId)
        {
            Reference reference = new Reference();
            reference.AccountId = accountId;
            reference.Timestamp = timestamp;
            reference.Category = category;
            reference.SubId = subId;
            reference.Name = name;
            reference.ReferringAccountId = referringAccountId;
            reference.ReferringTimestamp = referringTimestamp;
            reference.ReferringCategory = referringCategory;
            reference.ReferringSubId = referringSubId;
            return reference;
        }

        #endregion
        */
        #region Primitive Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String AccountId
        {
            get
            {
                return _AccountId;
            }
            set
            {
                if (_AccountId != value)
                {
                    OnAccountIdChanging(value);
                    ReportPropertyChanging("AccountId");
                    _AccountId = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("AccountId");
                    OnAccountIdChanged();
                }
            }
        }
        private global::System.String _AccountId;
        partial void OnAccountIdChanging(global::System.String value);
        partial void OnAccountIdChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.DateTime Timestamp
        {
            get
            {
                return _Timestamp;
            }
            set
            {
                // HACK: Fix the value to be UTC
                switch (value.Kind)
                {
                    case System.DateTimeKind.Unspecified:
                        value = System.DateTime.SpecifyKind(value, System.DateTimeKind.Utc);
                        break;
                    case System.DateTimeKind.Local:
                        value = value.ToUniversalTime();
                        break;
                }
                if (_Timestamp != value)
                {
                    OnTimestampChanging(value);
                    ReportPropertyChanging("Timestamp");
                    _Timestamp = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Timestamp");
                    OnTimestampChanged();
                }
            }
        }
        private global::System.DateTime _Timestamp;
        partial void OnTimestampChanging(global::System.DateTime value);
        partial void OnTimestampChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String Category
        {
            get
            {
                return _Category;
            }
            set
            {
                if (_Category != value)
                {
                    OnCategoryChanging(value);
                    ReportPropertyChanging("Category");
                    _Category = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Category");
                    OnCategoryChanged();
                }
            }
        }
        private global::System.String _Category;
        partial void OnCategoryChanging(global::System.String value);
        partial void OnCategoryChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
                if (_SubId != value)
                {
                    OnSubIdChanging(value);
                    ReportPropertyChanging("SubId");
                    _SubId = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("SubId");
                    OnSubIdChanged();
                }
            }
        }
        private global::System.String _SubId;
        partial void OnSubIdChanging(global::System.String value);
        partial void OnSubIdChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if (_Name != value)
                {
                    OnNameChanging(value);
                    ReportPropertyChanging("Name");
                    _Name = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Name");
                    OnNameChanged();
                }
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String ReferringAccountId
        {
            get
            {
                return _ReferringAccountId;
            }
            set
            {
                if (_ReferringAccountId != value)
                {
                    OnReferringAccountIdChanging(value);
                    ReportPropertyChanging("ReferringAccountId");
                    _ReferringAccountId = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("ReferringAccountId");
                    OnReferringAccountIdChanged();
                }
            }
        }
        private global::System.String _ReferringAccountId;
        partial void OnReferringAccountIdChanging(global::System.String value);
        partial void OnReferringAccountIdChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.DateTime ReferringTimestamp
        {
            get
            {
                return _ReferringTimestamp;
            }
            set
            {
                // HACK: Fix the value to be UTC
                switch (value.Kind)
                {
                    case System.DateTimeKind.Unspecified:
                        value = System.DateTime.SpecifyKind(value, System.DateTimeKind.Utc);
                        break;
                    case System.DateTimeKind.Local:
                        value = value.ToUniversalTime();
                        break;
                }
                if (_ReferringTimestamp != value)
                {
                    OnReferringTimestampChanging(value);
                    ReportPropertyChanging("ReferringTimestamp");
                    _ReferringTimestamp = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ReferringTimestamp");
                    OnReferringTimestampChanged();
                }
            }
        }
        private global::System.DateTime _ReferringTimestamp;
        partial void OnReferringTimestampChanging(global::System.DateTime value);
        partial void OnReferringTimestampChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String ReferringCategory
        {
            get
            {
                return _ReferringCategory;
            }
            set
            {
                if (_ReferringCategory != value)
                {
                    OnReferringCategoryChanging(value);
                    ReportPropertyChanging("ReferringCategory");
                    _ReferringCategory = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("ReferringCategory");
                    OnReferringCategoryChanged();
                }
            }
        }
        private global::System.String _ReferringCategory;
        partial void OnReferringCategoryChanging(global::System.String value);
        partial void OnReferringCategoryChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String ReferringSubId
        {
            get
            {
                return _ReferringSubId;
            }
            set
            {
                if (_ReferringSubId != value)
                {
                    OnReferringSubIdChanging(value);
                    ReportPropertyChanging("ReferringSubId");
                    _ReferringSubId = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("ReferringSubId");
                    OnReferringSubIdChanged();
                }
            }
        }
        private global::System.String _ReferringSubId;
        partial void OnReferringSubIdChanging(global::System.String value);
        partial void OnReferringSubIdChanged();

        #endregion

        #region Navigation Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MetaTweet", "ActivityReference", "Activity")]
        public Activity Activity
        {
            get
            {
                return ((IEntityWithRelationships) this).RelationshipManager.GetRelatedReference<Activity>("MetaTweet.ActivityReference", "Activity").Value;
            }
            set
            {
                ((IEntityWithRelationships) this).RelationshipManager.GetRelatedReference<Activity>("MetaTweet.ActivityReference", "Activity").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Activity> ActivityReference
        {
            get
            {
                return ((IEntityWithRelationships) this).RelationshipManager.GetRelatedReference<Activity>("MetaTweet.ActivityReference", "Activity");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships) this).RelationshipManager.InitializeRelatedReference<Activity>("MetaTweet.ActivityReference", "Activity", value);
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName = "MetaTweet", Name = "Relation")]
    [Serializable()]
    [DataContractAttribute(IsReference = true)]
    public partial class Relation : StorageObject // HACK
    {
        /* HACK:
        #region Factory Method

        /// <summary>
        /// Create a new Relation object.
        /// </summary>
        /// <param name="accountId">Initial value of the AccountId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="relatingAccountId">Initial value of the RelatingAccountId property.</param>
        public static Relation CreateRelation(global::System.String accountId, global::System.String name, global::System.String relatingAccountId)
        {
            Relation relation = new Relation();
            relation.AccountId = accountId;
            relation.Name = name;
            relation.RelatingAccountId = relatingAccountId;
            return relation;
        }

        #endregion
        */
        #region Primitive Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String AccountId
        {
            get
            {
                return _AccountId;
            }
            set
            {
                if (_AccountId != value)
                {
                    OnAccountIdChanging(value);
                    ReportPropertyChanging("AccountId");
                    _AccountId = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("AccountId");
                    OnAccountIdChanged();
                }
            }
        }
        private global::System.String _AccountId;
        partial void OnAccountIdChanging(global::System.String value);
        partial void OnAccountIdChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if (_Name != value)
                {
                    OnNameChanging(value);
                    ReportPropertyChanging("Name");
                    _Name = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Name");
                    OnNameChanged();
                }
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String RelatingAccountId
        {
            get
            {
                return _RelatingAccountId;
            }
            set
            {
                if (_RelatingAccountId != value)
                {
                    OnRelatingAccountIdChanging(value);
                    ReportPropertyChanging("RelatingAccountId");
                    _RelatingAccountId = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("RelatingAccountId");
                    OnRelatingAccountIdChanged();
                }
            }
        }
        private global::System.String _RelatingAccountId;
        partial void OnRelatingAccountIdChanging(global::System.String value);
        partial void OnRelatingAccountIdChanged();

        #endregion

        #region Navigation Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MetaTweet", "AccountRelation", "Account")]
        public Account Account
        {
            get
            {
                return ((IEntityWithRelationships) this).RelationshipManager.GetRelatedReference<Account>("MetaTweet.AccountRelation", "Account").Value;
            }
            set
            {
                ((IEntityWithRelationships) this).RelationshipManager.GetRelatedReference<Account>("MetaTweet.AccountRelation", "Account").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Account> AccountReference
        {
            get
            {
                return ((IEntityWithRelationships) this).RelationshipManager.GetRelatedReference<Account>("MetaTweet.AccountRelation", "Account");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships) this).RelationshipManager.InitializeRelatedReference<Account>("MetaTweet.AccountRelation", "Account", value);
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName = "MetaTweet", Name = "Tag")]
    [Serializable()]
    [DataContractAttribute(IsReference = true)]
    public partial class Tag : StorageObject // HACK
    {
        /* HACK:
        #region Factory Method

        /// <summary>
        /// Create a new Tag object.
        /// </summary>
        /// <param name="accountId">Initial value of the AccountId property.</param>
        /// <param name="timestamp">Initial value of the Timestamp property.</param>
        /// <param name="category">Initial value of the Category property.</param>
        /// <param name="subId">Initial value of the SubId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="value">Initial value of the Value property.</param>
        public static Tag CreateTag(global::System.String accountId, global::System.DateTime timestamp, global::System.String category, global::System.String subId, global::System.String name, global::System.String value)
        {
            Tag tag = new Tag();
            tag.AccountId = accountId;
            tag.Timestamp = timestamp;
            tag.Category = category;
            tag.SubId = subId;
            tag.Name = name;
            tag.Value = value;
            return tag;
        }

        #endregion
        */
        #region Primitive Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String AccountId
        {
            get
            {
                return _AccountId;
            }
            set
            {
                if (_AccountId != value)
                {
                    OnAccountIdChanging(value);
                    ReportPropertyChanging("AccountId");
                    _AccountId = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("AccountId");
                    OnAccountIdChanged();
                }
            }
        }
        private global::System.String _AccountId;
        partial void OnAccountIdChanging(global::System.String value);
        partial void OnAccountIdChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.DateTime Timestamp
        {
            get
            {
                return _Timestamp;
            }
            set
            {
                // HACK: Fix the value to be UTC
                switch (value.Kind)
                {
                    case System.DateTimeKind.Unspecified:
                        value = System.DateTime.SpecifyKind(value, System.DateTimeKind.Utc);
                        break;
                    case System.DateTimeKind.Local:
                        value = value.ToUniversalTime();
                        break;
                }
                if (_Timestamp != value)
                {
                    OnTimestampChanging(value);
                    ReportPropertyChanging("Timestamp");
                    _Timestamp = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Timestamp");
                    OnTimestampChanged();
                }
            }
        }
        private global::System.DateTime _Timestamp;
        partial void OnTimestampChanging(global::System.DateTime value);
        partial void OnTimestampChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String Category
        {
            get
            {
                return _Category;
            }
            set
            {
                if (_Category != value)
                {
                    OnCategoryChanging(value);
                    ReportPropertyChanging("Category");
                    _Category = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Category");
                    OnCategoryChanged();
                }
            }
        }
        private global::System.String _Category;
        partial void OnCategoryChanging(global::System.String value);
        partial void OnCategoryChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String SubId
        {
            get
            {
                return _SubId;
            }
            set
            {
                if (_SubId != value)
                {
                    OnSubIdChanging(value);
                    ReportPropertyChanging("SubId");
                    _SubId = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("SubId");
                    OnSubIdChanged();
                }
            }
        }
        private global::System.String _SubId;
        partial void OnSubIdChanging(global::System.String value);
        partial void OnSubIdChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if (_Name != value)
                {
                    OnNameChanging(value);
                    ReportPropertyChanging("Name");
                    _Name = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Name");
                    OnNameChanged();
                }
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String Value
        {
            get
            {
                return _Value;
            }
            set
            {
                if (_Value != value)
                {
                    OnValueChanging(value);
                    ReportPropertyChanging("Value");
                    _Value = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Value");
                    OnValueChanged();
                }
            }
        }
        private global::System.String _Value;
        partial void OnValueChanging(global::System.String value);
        partial void OnValueChanged();

        #endregion

        #region Navigation Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MetaTweet", "ActivityTag", "Activity")]
        public Activity Activity
        {
            get
            {
                return ((IEntityWithRelationships) this).RelationshipManager.GetRelatedReference<Activity>("MetaTweet.ActivityTag", "Activity").Value;
            }
            set
            {
                ((IEntityWithRelationships) this).RelationshipManager.GetRelatedReference<Activity>("MetaTweet.ActivityTag", "Activity").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Activity> ActivityReference
        {
            get
            {
                return ((IEntityWithRelationships) this).RelationshipManager.GetRelatedReference<Activity>("MetaTweet.ActivityTag", "Activity");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships) this).RelationshipManager.InitializeRelatedReference<Activity>("MetaTweet.ActivityTag", "Activity", value);
                }
            }
        }

        #endregion
    }

    #endregion

}
