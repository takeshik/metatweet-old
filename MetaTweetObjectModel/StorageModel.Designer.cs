//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// HACK: This code was modified by hand.

[assembly: global::System.Data.Objects.DataClasses.EdmSchemaAttribute()]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("MetaTweet", "AccountActivity", "Account", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(XSpect.MetaTweet.Objects.Account), "Activity", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(XSpect.MetaTweet.Objects.Activity))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("MetaTweet", "AccountAnnotation", "Account", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(XSpect.MetaTweet.Objects.Account), "Annotation", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(XSpect.MetaTweet.Objects.Annotation))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("MetaTweet", "AccountRelation", "Account", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(XSpect.MetaTweet.Objects.Account), "Relation", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(XSpect.MetaTweet.Objects.Relation))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("MetaTweet", "AccountMark", "Account", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(XSpect.MetaTweet.Objects.Account), "Mark", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(XSpect.MetaTweet.Objects.Mark))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("MetaTweet", "ActivityMark", "Activity", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(XSpect.MetaTweet.Objects.Activity), "Mark", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(XSpect.MetaTweet.Objects.Mark))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("MetaTweet", "ActivityReference", "Activity", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(XSpect.MetaTweet.Objects.Activity), "Reference", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(XSpect.MetaTweet.Objects.Reference))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("MetaTweet", "ActivityTag", "Activity", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(XSpect.MetaTweet.Objects.Activity), "Tag", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(XSpect.MetaTweet.Objects.Tag))]

// Original file name:
// Generation date: 10/04/08 13:42:15
namespace XSpect.MetaTweet.Objects
{
    
    /// <summary>
    /// ストレージのエンティティ データに対してクエリを実行してそのデータをオブジェクトとして操作するための機能を提供します。
    /// </summary>
    public partial class StorageObjectContext : global::System.Data.Objects.ObjectContext
    {
        /// <summary>
        /// アプリケーション構成ファイルの 'StorageObjectContext' セクションにある接続文字列を使用して新しい StorageObjectContext オブジェクトを初期化します。
        /// </summary>
        public StorageObjectContext() : 
                base("name=StorageObjectContext", "StorageObjectContext")
        {
            this.OnContextCreated();
        }
        /// <summary>
        /// 新しい <see cref="StorageObjectContext"/> オブジェクトを初期化します。
        /// </summary>
        public StorageObjectContext(string connectionString) : 
                base(connectionString, "StorageObjectContext")
        {
            this.OnContextCreated();
        }
        /// <summary>
        /// 新しい <see cref="StorageObjectContext"/> オブジェクトを初期化します。
        /// </summary>
        public StorageObjectContext(global::System.Data.EntityClient.EntityConnection connection) : 
                base(connection, "StorageObjectContext")
        {
            this.OnContextCreated();
        }
        partial void OnContextCreated();
        /// <summary>
        /// <see cref="Account"/> オブジェクトを取得するクエリを取得します。
        /// </summary>
        /// <value>
        /// <see cref="Account"/> オブジェクトを取得するクエリ。
        /// </value>
        public global::System.Data.Objects.ObjectQuery<Account> AccountSet
        {
            get
            {
                if ((this._AccountSet == null))
                {
                    this._AccountSet = base.CreateQuery<Account>("[AccountSet]");
                }
                return this._AccountSet;
            }
        }
        private global::System.Data.Objects.ObjectQuery<Account> _AccountSet;
        /// <summary>
        /// <see cref="Activity"/> オブジェクトを取得するクエリを取得します。
        /// </summary>
        /// <value>
        /// <see cref="Activity"/> オブジェクトを取得するクエリ。
        /// </value>
        public global::System.Data.Objects.ObjectQuery<Activity> ActivitySet
        {
            get
            {
                if ((this._ActivitySet == null))
                {
                    this._ActivitySet = base.CreateQuery<Activity>("[ActivitySet]");
                }
                return this._ActivitySet;
            }
        }
        private global::System.Data.Objects.ObjectQuery<Activity> _ActivitySet;
        /// <summary>
        /// <see cref="Annotation"/> オブジェクトを取得するクエリを取得します。
        /// </summary>
        /// <value>
        /// <see cref="Annotation"/> オブジェクトを取得するクエリ。
        /// </value>
        public global::System.Data.Objects.ObjectQuery<Annotation> AnnotationSet
        {
            get
            {
                if ((this._AnnotationSet == null))
                {
                    this._AnnotationSet = base.CreateQuery<Annotation>("[AnnotationSet]");
                }
                return this._AnnotationSet;
            }
        }
        private global::System.Data.Objects.ObjectQuery<Annotation> _AnnotationSet;
        /// <summary>
        /// <see cref="Mark"/> オブジェクトを取得するクエリを取得します。
        /// </summary>
        /// <value>
        /// <see cref="Mark"/> オブジェクトを取得するクエリ。
        /// </value>
        public global::System.Data.Objects.ObjectQuery<Mark> MarkSet
        {
            get
            {
                if ((this._MarkSet == null))
                {
                    this._MarkSet = base.CreateQuery<Mark>("[MarkSet]");
                }
                return this._MarkSet;
            }
        }
        private global::System.Data.Objects.ObjectQuery<Mark> _MarkSet;
        /// <summary>
        /// <see cref="ReferenceSet"/> オブジェクトを取得するクエリを取得します。
        /// </summary>
        /// <value>
        /// <see cref="ReferenceSet"/> オブジェクトを取得するクエリ。
        /// </value>
        public global::System.Data.Objects.ObjectQuery<Reference> ReferenceSet
        {
            get
            {
                if ((this._ReferenceSet == null))
                {
                    this._ReferenceSet = base.CreateQuery<Reference>("[ReferenceSet]");
                }
                return this._ReferenceSet;
            }
        }
        private global::System.Data.Objects.ObjectQuery<Reference> _ReferenceSet;
        /// <summary>
        /// <see cref="Relation"/> オブジェクトを取得するクエリを取得します。
        /// </summary>
        /// <value>
        /// <see cref="Relation"/> オブジェクトを取得するクエリ。
        /// </value>
        public global::System.Data.Objects.ObjectQuery<Relation> RelationSet
        {
            get
            {
                if ((this._RelationSet == null))
                {
                    this._RelationSet = base.CreateQuery<Relation>("[RelationSet]");
                }
                return this._RelationSet;
            }
        }
        private global::System.Data.Objects.ObjectQuery<Relation> _RelationSet;
        /// <summary>
        /// <see cref="Tag"/> オブジェクトを取得するクエリを取得します。
        /// </summary>
        /// <value>
        /// <see cref="Tag"/> オブジェクトを取得するクエリ。
        /// </value>
        public global::System.Data.Objects.ObjectQuery<Tag> TagSet
        {
            get
            {
                if ((this._TagSet == null))
                {
                    this._TagSet = base.CreateQuery<Tag>("[TagSet]");
                }
                return this._TagSet;
            }
        }
        private global::System.Data.Objects.ObjectQuery<Tag> _TagSet;
        /// <summary>
        /// <see cref="Account"/> をオブジェクト コンテキストに追加します。
        /// </summary>
        public void AddToAccountSet(Account account)
        {
            base.AddObject("AccountSet", account);
        }
        /// <summary>
        /// <see cref="Activity"/> をオブジェクト コンテキストに追加します。
        /// </summary>
        public void AddToActivitySet(Activity activity)
        {
            base.AddObject("ActivitySet", activity);
        }
        /// <summary>
        /// <see cref="Annotation"/> をオブジェクト コンテキストに追加します。
        /// </summary>
        public void AddToAnnotationSet(Annotation annotation)
        {
            base.AddObject("AnnotationSet", annotation);
        }
        /// <summary>
        /// <see cref="Mark"/> をオブジェクト コンテキストに追加します。
        /// </summary>
        public void AddToMarkSet(Mark mark)
        {
            base.AddObject("MarkSet", mark);
        }
        /// <summary>
        /// <see cref="Reference"/> をオブジェクト コンテキストに追加します。
        /// </summary>
        public void AddToReferenceSet(Reference reference)
        {
            base.AddObject("ReferenceSet", reference);
        }
        /// <summary>
        /// <see cref="Relation"/> をオブジェクト コンテキストに追加します。
        /// </summary>
        public void AddToRelationSet(Relation relation)
        {
            base.AddObject("RelationSet", relation);
        }
        /// <summary>
        /// <see cref="Tag"/> をオブジェクト コンテキストに追加します。
        /// </summary>
        public void AddToTagSet(Tag tag)
        {
            base.AddObject("TagSet", tag);
        }
    }
    /// <summary>
    /// 任意のサービスに登録しているユーザを表します。
    /// </summary>
    /// <LongDescription>
    /// アカウントは MetaTweet のデータ構造の頂点に位置する構造で、任意のサービスを利用するユーザを表現します。
    /// </LongDescription>
    /// <KeyProperties>
    /// AccountId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="MetaTweet", Name="Account")]
    // [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class Account : StorageObject
    {
        /*
        /// <summary>
        /// Create a new Account object.
        /// </summary>
        /// <param name="accountId">Initial value of AccountId.</param>
        /// <param name="realm">Initial value of Realm.</param>
        /// <param name="seedString">Initial value of SeedString.</param>
        public static Account CreateAccount(string accountId, string realm, string seedString)
        {
            Account account = new Account();
            account.AccountId = accountId;
            account.Realm = realm;
            account.SeedString = seedString;
            return account;
        }
        */
        /// <summary>
        /// このアカウントを一意に識別する SHA-1 ハッシュ文字列値を取得または設定します。
        /// </summary>
        /// <LongDescription>
        /// アカウントは SHA-1 ハッシュ文字列によって一意に識別されます。この値はネットワーク全体で一意である &lt;see cref=&quot;Realm&quot;/&gt; と &lt;see cref=&quot;SeedString&quot;&gt; を組み合わせた UTF-16BE 文字列から生成されます。
        /// </LongDescription>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string AccountId
        {
            get
            {
                return this._AccountId;
            }
            set
            {
                this.OnAccountIdChanging(value);
                this.ReportPropertyChanging("AccountId");
                this._AccountId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("AccountId");
                this.OnAccountIdChanged();
            }
        }
        private string _AccountId;
        partial void OnAccountIdChanging(string value);
        partial void OnAccountIdChanged();
        /// <summary>
        /// このアカウントに関連付けられているサービスを表す文字列を取得または設定します。
        /// </summary>
        /// <LongDescription>
        /// Realm はアカウントに関連付けられているサービスを識別する要素です。Realm は自由に指定することができます。通常、Realm はサービスの完全修飾ドメイン名 (FQDN) を逆順に並べた文字列を先頭に配置し、その後に補足的な要素を連結した文字列を指定します (Java のパッケージ命名規約と同じ)。例えば、サービス example.com に関連付けられているアカウントの Realm は &lt;c&gt;com.example&lt;/c&gt; が一般に用いられるべきです。
        /// </LongDescription>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string Realm
        {
            get
            {
                return this._Realm;
            }
            set
            {
                this.OnRealmChanging(value);
                this.ReportPropertyChanging("Realm");
                this._Realm = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("Realm");
                this.OnRealmChanged();
            }
        }
        private string _Realm;
        partial void OnRealmChanging(string value);
        partial void OnRealmChanged();
        /// <summary>
        /// サービス内でこのアカウントを一意に識別するための情報を取得または設定します。
        /// </summary>
        /// <LongDescription>
        /// シード文字列は、&lt;c&gt;KEY=VALUE, KEY=VALUE, ...&lt;/c&gt; という形式によって構成される、サービス内で変化することのない、ユーザを一意に識別するための情報の集合です。キーは昇順に整列する必要があります。
        /// </LongDescription>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string SeedString
        {
            get
            {
                return this._SeedString;
            }
            set
            {
                this.OnSeedStringChanging(value);
                this.ReportPropertyChanging("SeedString");
                this._SeedString = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("SeedString");
                this.OnSeedStringChanged();
            }
        }
        private string _SeedString;
        partial void OnSeedStringChanging(string value);
        partial void OnSeedStringChanged();
        /// <summary>
        /// このアカウントによって行われたアクティビティのシーケンスを取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("MetaTweet", "AccountActivity", "Activity")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<Activity> Activities
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Activity>("MetaTweet.AccountActivity", "Activity");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Activity>("MetaTweet.AccountActivity", "Activity", value);
                }
            }
        }
        /// <summary>
        /// このアカウントに関連付けられたアノテーションのシーケンスを取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("MetaTweet", "AccountAnnotation", "Annotation")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<Annotation> Annotations
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Annotation>("MetaTweet.AccountAnnotation", "Annotation");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Annotation>("MetaTweet.AccountAnnotation", "Annotation", value);
                }
            }
        }
        /// <summary>
        /// このアカウントに関連付けられたリレーションのシーケンスを取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("MetaTweet", "AccountRelation", "Relation")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<Relation> Relations
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Relation>("MetaTweet.AccountRelation", "Relation");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Relation>("MetaTweet.AccountRelation", "Relation", value);
                }
            }
        }
        /// <summary>
        /// このアカウントに関連付けられたマークのシーケンスを取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("MetaTweet", "AccountMark", "Mark")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<Mark> Marks
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Mark>("MetaTweet.AccountMark", "Mark");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Mark>("MetaTweet.AccountMark", "Mark", value);
                }
            }
        }
    }
    /// <summary>
    /// アカウントによって行われた行動を表します。
    /// </summary>
    /// <LongDescription>
    /// アクティビティは、任意のアカウントによって行われたあらゆる行動 (設定値および状態の変更、ポストの投稿を含みます) を表現します。
    /// </LongDescription>
    /// <KeyProperties>
    /// AccountId
    /// Timestamp
    /// Category
    /// SubId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="MetaTweet", Name="Activity")]
    // [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class Activity : StorageObject
    {
        /*
        /// <summary>
        /// Create a new Activity object.
        /// </summary>
        /// <param name="accountId">Initial value of AccountId.</param>
        /// <param name="timestamp">Initial value of Timestamp.</param>
        /// <param name="category">Initial value of Category.</param>
        /// <param name="subId">Initial value of SubId.</param>
        public static Activity CreateActivity(string accountId, global::System.DateTime timestamp, string category, string subId)
        {
            Activity activity = new Activity();
            activity.AccountId = accountId;
            activity.Timestamp = timestamp;
            activity.Category = category;
            activity.SubId = subId;
            return activity;
        }
        */
        /// <summary>
        /// このアクティビティを行ったアカウントの ID を取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string AccountId
        {
            get
            {
                return this._AccountId;
            }
            set
            {
                this.OnAccountIdChanging(value);
                this.ReportPropertyChanging("AccountId");
                this._AccountId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("AccountId");
                this.OnAccountIdChanged();
            }
        }
        private string _AccountId;
        partial void OnAccountIdChanging(string value);
        partial void OnAccountIdChanged();
        /// <summary>
        /// このアクティビティが行われた時刻を取得または設定します。
        /// </summary>
        /// <LongDescription>
        /// 時刻は協定世界時 (UTC) として設定されなければなりません。
        /// </LongDescription>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime Timestamp
        {
            get
            {
                return this._Timestamp;
            }
            set
            {
                this.OnTimestampChanging(value);
                this.ReportPropertyChanging("Timestamp");
                this._Timestamp = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("Timestamp");
                this.OnTimestampChanged();
            }
        }
        private global::System.DateTime _Timestamp;
        partial void OnTimestampChanging(global::System.DateTime value);
        partial void OnTimestampChanged();
        /// <summary>
        /// このアクティビティが表す行動の種類を表す文字列を取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string Category
        {
            get
            {
                return this._Category;
            }
            set
            {
                this.OnCategoryChanging(value);
                this.ReportPropertyChanging("Category");
                this._Category = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("Category");
                this.OnCategoryChanged();
            }
        }
        private string _Category;
        partial void OnCategoryChanging(string value);
        partial void OnCategoryChanged();
        /// <summary>
        /// このアクティビティを、同一アカウント・時刻・カテゴリの他のアクティビティと識別するための文字列、または、このアクティビティを一意に識別する文字列を取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string SubId
        {
            get
            {
                return this._SubId;
            }
            set
            {
                this.OnSubIdChanging(value);
                this.ReportPropertyChanging("SubId");
                this._SubId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("SubId");
                this.OnSubIdChanged();
            }
        }
        private string _SubId;
        partial void OnSubIdChanging(string value);
        partial void OnSubIdChanged();
        /// <summary>
        /// このアクティビティを行ったユーザ エージェントを識別する文字列を取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string UserAgent
        {
            get
            {
                return this._UserAgent;
            }
            set
            {
                this.OnUserAgentChanging(value);
                this.ReportPropertyChanging("UserAgent");
                this._UserAgent = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, true);
                this.ReportPropertyChanged("UserAgent");
                this.OnUserAgentChanged();
            }
        }
        private string _UserAgent;
        partial void OnUserAgentChanging(string value);
        partial void OnUserAgentChanged();
        /// <summary>
        /// このアクティビティの値となる文字列を取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                this.OnValueChanging(value);
                this.ReportPropertyChanging("Value");
                this._Value = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, true);
                this.ReportPropertyChanged("Value");
                this.OnValueChanged();
            }
        }
        private string _Value;
        partial void OnValueChanging(string value);
        partial void OnValueChanged();
        /// <summary>
        /// このアクティビティの値となるバイト列を取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Data
        {
            get
            {
                return global::System.Data.Objects.DataClasses.StructuralObject.GetValidValue(this._Data);
            }
            set
            {
                this.OnDataChanging(value);
                this.ReportPropertyChanging("Data");
                this._Data = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, true);
                this.ReportPropertyChanged("Data");
                this.OnDataChanged();
            }
        }
        private byte[] _Data;
        partial void OnDataChanging(byte[] value);
        partial void OnDataChanged();
        /// <summary>
        /// このアクティビティを行ったアカウントを取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("MetaTweet", "AccountActivity", "Account")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Account Account
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Account>("MetaTweet.AccountActivity", "Account").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Account>("MetaTweet.AccountActivity", "Account").Value = value;
            }
        }
        /// <summary>
        /// このアクティビティを行ったアカウントを取得または設定します。
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Account> AccountReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Account>("MetaTweet.AccountActivity", "Account");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Account>("MetaTweet.AccountActivity", "Account", value);
                }
            }
        }
        /// <summary>
        /// このアクティビティに関連付けられたマークのシーケンスを取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("MetaTweet", "ActivityMark", "Mark")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<Mark> Marks
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Mark>("MetaTweet.ActivityMark", "Mark");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Mark>("MetaTweet.ActivityMark", "Mark", value);
                }
            }
        }
        /// <summary>
        /// このアクティビティに関連付けられたリファレンスのシーケンスを取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("MetaTweet", "ActivityReference", "Reference")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<Reference> References
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Reference>("MetaTweet.ActivityReference", "Reference");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Reference>("MetaTweet.ActivityReference", "Reference", value);
                }
            }
        }
        /// <summary>
        /// このアクティビティに関連付けられたタグのシーケンスを取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("MetaTweet", "ActivityTag", "Tag")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<Tag> Tags
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Tag>("MetaTweet.ActivityTag", "Tag");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Tag>("MetaTweet.ActivityTag", "Tag", value);
                }
            }
        }
    }
    /// <summary>
    /// アカウントに追加して記述される情報を表します。
    /// </summary>
    /// <LongDescription>
    /// アノテーションは、アカウントに追加の情報を記述する付与情報です。
    /// </LongDescription>
    /// <KeyProperties>
    /// AccountId
    /// Name
    /// Value
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="MetaTweet", Name="Annotation")]
    // [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class Annotation : StorageObject
    {
        /*
        /// <summary>
        /// Create a new Annotation object.
        /// </summary>
        /// <param name="accountId">Initial value of AccountId.</param>
        /// <param name="name">Initial value of Name.</param>
        /// <param name="value">Initial value of Value.</param>
        public static Annotation CreateAnnotation(string accountId, string name, string value)
        {
            Annotation annotation = new Annotation();
            annotation.AccountId = accountId;
            annotation.Name = name;
            annotation.Value = value;
            return annotation;
        }
        */
        /// <summary>
        /// このアノテーションが関連付けられているアカウントの ID を取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string AccountId
        {
            get
            {
                return this._AccountId;
            }
            set
            {
                this.OnAccountIdChanging(value);
                this.ReportPropertyChanging("AccountId");
                this._AccountId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("AccountId");
                this.OnAccountIdChanged();
            }
        }
        private string _AccountId;
        partial void OnAccountIdChanging(string value);
        partial void OnAccountIdChanged();
        /// <summary>
        /// このアノテーションの意味となる文字列を取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                this.OnNameChanging(value);
                this.ReportPropertyChanging("Name");
                this._Name = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("Name");
                this.OnNameChanged();
            }
        }
        private string _Name;
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        /// <summary>
        /// このアノテーションの値となる文字列を取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                this.OnValueChanging(value);
                this.ReportPropertyChanging("Value");
                this._Value = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("Value");
                this.OnValueChanged();
            }
        }
        private string _Value;
        partial void OnValueChanging(string value);
        partial void OnValueChanged();
        /// <summary>
        /// このアノテーションが関連付けられているアカウントを取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("MetaTweet", "AccountAnnotation", "Account")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Account Account
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Account>("MetaTweet.AccountAnnotation", "Account").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Account>("MetaTweet.AccountAnnotation", "Account").Value = value;
            }
        }
        /// <summary>
        /// このアノテーションが関連付けられているアカウントを取得または設定します。
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Account> AccountReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Account>("MetaTweet.AccountAnnotation", "Account");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Account>("MetaTweet.AccountAnnotation", "Account", value);
                }
            }
        }
    }
    /// <summary>
    /// アカウントとアクティビティの関係を記述する情報を表します。
    /// </summary>
    /// <LongDescription>
    /// マークは、アカウントとアクティビティの関係を記述する付与情報です。
    /// </LongDescription>
    /// <KeyProperties>
    /// AccountId
    /// Name
    /// MarkingAccountId
    /// MarkingTimestamp
    /// MarkingCategory
    /// MarkingSubId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="MetaTweet", Name="Mark")]
    // [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class Mark : StorageObject
    {
        /*
        /// <summary>
        /// Create a new Mark object.
        /// </summary>
        /// <param name="accountId">Initial value of AccountId.</param>
        /// <param name="name">Initial value of Name.</param>
        /// <param name="markingAccountId">Initial value of MarkingAccountId.</param>
        /// <param name="markingTimestamp">Initial value of MarkingTimestamp.</param>
        /// <param name="markingCategory">Initial value of MarkingCategory.</param>
        /// <param name="markingSubId">Initial value of MarkingSubId.</param>
        public static Mark CreateMark(string accountId, string name, string markingAccountId, global::System.DateTime markingTimestamp, string markingCategory, string markingSubId)
        {
            Mark mark = new Mark();
            mark.AccountId = accountId;
            mark.Name = name;
            mark.MarkingAccountId = markingAccountId;
            mark.MarkingTimestamp = markingTimestamp;
            mark.MarkingCategory = markingCategory;
            mark.MarkingSubId = markingSubId;
            return mark;
        }
        */
        /// <summary>
        /// このマークが関連付けられているアカウントの ID を取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string AccountId
        {
            get
            {
                return this._AccountId;
            }
            set
            {
                this.OnAccountIdChanging(value);
                this.ReportPropertyChanging("AccountId");
                this._AccountId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("AccountId");
                this.OnAccountIdChanged();
            }
        }
        private string _AccountId;
        partial void OnAccountIdChanging(string value);
        partial void OnAccountIdChanged();
        /// <summary>
        /// このマークの意味となる文字列を取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                this.OnNameChanging(value);
                this.ReportPropertyChanging("Name");
                this._Name = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("Name");
                this.OnNameChanged();
            }
        }
        private string _Name;
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        /// <summary>
        /// このマークが関連付けられる先のアクティビティのアカウント ID を取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string MarkingAccountId
        {
            get
            {
                return this._MarkingAccountId;
            }
            set
            {
                this.OnMarkingAccountIdChanging(value);
                this.ReportPropertyChanging("MarkingAccountId");
                this._MarkingAccountId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("MarkingAccountId");
                this.OnMarkingAccountIdChanged();
            }
        }
        private string _MarkingAccountId;
        partial void OnMarkingAccountIdChanging(string value);
        partial void OnMarkingAccountIdChanged();
        /// <summary>
        /// このマークが関連付けられる先のアクティビティのタイムスタンプを取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime MarkingTimestamp
        {
            get
            {
                return this._MarkingTimestamp;
            }
            set
            {
                this.OnMarkingTimestampChanging(value);
                this.ReportPropertyChanging("MarkingTimestamp");
                this._MarkingTimestamp = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("MarkingTimestamp");
                this.OnMarkingTimestampChanged();
            }
        }
        private global::System.DateTime _MarkingTimestamp;
        partial void OnMarkingTimestampChanging(global::System.DateTime value);
        partial void OnMarkingTimestampChanged();
        /// <summary>
        /// このマークが関連付けられる先のアクティビティのカテゴリを取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string MarkingCategory
        {
            get
            {
                return this._MarkingCategory;
            }
            set
            {
                this.OnMarkingCategoryChanging(value);
                this.ReportPropertyChanging("MarkingCategory");
                this._MarkingCategory = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("MarkingCategory");
                this.OnMarkingCategoryChanged();
            }
        }
        private string _MarkingCategory;
        partial void OnMarkingCategoryChanging(string value);
        partial void OnMarkingCategoryChanged();
        /// <summary>
        /// このマークが関連付けられる先のアクティビティのサブ ID を取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string MarkingSubId
        {
            get
            {
                return this._MarkingSubId;
            }
            set
            {
                this.OnMarkingSubIdChanging(value);
                this.ReportPropertyChanging("MarkingSubId");
                this._MarkingSubId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("MarkingSubId");
                this.OnMarkingSubIdChanged();
            }
        }
        private string _MarkingSubId;
        partial void OnMarkingSubIdChanging(string value);
        partial void OnMarkingSubIdChanged();
        /// <summary>
        /// このマークが関連付けられているアカウントを取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("MetaTweet", "AccountMark", "Account")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Account Account
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Account>("MetaTweet.AccountMark", "Account").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Account>("MetaTweet.AccountMark", "Account").Value = value;
            }
        }
        /// <summary>
        /// このマークが関連付けられているアカウントを取得または設定します。
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Account> AccountReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Account>("MetaTweet.AccountMark", "Account");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Account>("MetaTweet.AccountMark", "Account", value);
                }
            }
        }
        /// <summary>
        /// このマークが関連付けられる先のアクティビティを取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("MetaTweet", "ActivityMark", "Activity")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Activity MarkingActivity
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Activity>("MetaTweet.ActivityMark", "Activity").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Activity>("MetaTweet.ActivityMark", "Activity").Value = value;
            }
        }
        /// <summary>
        /// このマークが関連付けられる先のアクティビティを取得または設定します。
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Activity> MarkingActivityReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Activity>("MetaTweet.ActivityMark", "Activity");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Activity>("MetaTweet.ActivityMark", "Activity", value);
                }
            }
        }
    }
    /// <summary>
    /// アクティビティ同士の関係を記述する情報を表します。
    /// </summary>
    /// <LongDescription>
    /// リファレンスは、アクティビティ同士の関係を記述する付与情報です。
    /// </LongDescription>
    /// <KeyProperties>
    /// AccountId
    /// Timestamp
    /// Category
    /// SubId
    /// Name
    /// ReferringAccountId
    /// ReferringTimestamp
    /// ReferringCategory
    /// ReferringSubId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="MetaTweet", Name="Reference")]
    // [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class Reference : StorageObject
    {
        /*
        /// <summary>
        /// Create a new Reference object.
        /// </summary>
        /// <param name="accountId">Initial value of AccountId.</param>
        /// <param name="timestamp">Initial value of Timestamp.</param>
        /// <param name="category">Initial value of Category.</param>
        /// <param name="subId">Initial value of SubId.</param>
        /// <param name="name">Initial value of Name.</param>
        /// <param name="referringAccountId">Initial value of ReferringAccountId.</param>
        /// <param name="referringTimestamp">Initial value of ReferringTimestamp.</param>
        /// <param name="referringCategory">Initial value of ReferringCategory.</param>
        /// <param name="referringSubId">Initial value of ReferringSubId.</param>
        public static Reference CreateReference(string accountId, global::System.DateTime timestamp, string category, string subId, string name, string referringAccountId, global::System.DateTime referringTimestamp, string referringCategory, string referringSubId)
        {
            Reference reference = new Reference();
            reference.AccountId = accountId;
            reference.Timestamp = timestamp;
            reference.Category = category;
            reference.SubId = subId;
            reference.Name = name;
            reference.ReferringAccountId = referringAccountId;
            reference.ReferringTimestamp = referringTimestamp;
            reference.ReferringCategory = referringCategory;
            reference.ReferringSubId = referringSubId;
            return reference;
        }
        */
        /// <summary>
        /// このリファレンスが関連付けられているアクティビティのアカウント ID を取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string AccountId
        {
            get
            {
                return this._AccountId;
            }
            set
            {
                this.OnAccountIdChanging(value);
                this.ReportPropertyChanging("AccountId");
                this._AccountId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("AccountId");
                this.OnAccountIdChanged();
            }
        }
        private string _AccountId;
        partial void OnAccountIdChanging(string value);
        partial void OnAccountIdChanged();
        /// <summary>
        /// このリファレンスが関連付けられているアクティビティのタイムスタンプを取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime Timestamp
        {
            get
            {
                return this._Timestamp;
            }
            set
            {
                this.OnTimestampChanging(value);
                this.ReportPropertyChanging("Timestamp");
                this._Timestamp = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("Timestamp");
                this.OnTimestampChanged();
            }
        }
        private global::System.DateTime _Timestamp;
        partial void OnTimestampChanging(global::System.DateTime value);
        partial void OnTimestampChanged();
        /// <summary>
        /// このリファレンスが関連付けられているアクティビティのカテゴリを取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string Category
        {
            get
            {
                return this._Category;
            }
            set
            {
                this.OnCategoryChanging(value);
                this.ReportPropertyChanging("Category");
                this._Category = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("Category");
                this.OnCategoryChanged();
            }
        }
        private string _Category;
        partial void OnCategoryChanging(string value);
        partial void OnCategoryChanged();
        /// <summary>
        /// このリファレンスが関連付けられているアクティビティのサブ ID を取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string SubId
        {
            get
            {
                return this._SubId;
            }
            set
            {
                this.OnSubIdChanging(value);
                this.ReportPropertyChanging("SubId");
                this._SubId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("SubId");
                this.OnSubIdChanged();
            }
        }
        private string _SubId;
        partial void OnSubIdChanging(string value);
        partial void OnSubIdChanged();
        /// <summary>
        /// このリファレンスの意味となる文字列を取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                this.OnNameChanging(value);
                this.ReportPropertyChanging("Name");
                this._Name = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("Name");
                this.OnNameChanged();
            }
        }
        private string _Name;
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        /// <summary>
        /// このリファレンスが関連付けられる先のアクティビティのアカウント ID を取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string ReferringAccountId
        {
            get
            {
                return this._ReferringAccountId;
            }
            set
            {
                this.OnReferringAccountIdChanging(value);
                this.ReportPropertyChanging("ReferringAccountId");
                this._ReferringAccountId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("ReferringAccountId");
                this.OnReferringAccountIdChanged();
            }
        }
        private string _ReferringAccountId;
        partial void OnReferringAccountIdChanging(string value);
        partial void OnReferringAccountIdChanged();
        /// <summary>
        /// このリファレンスが関連付けられる先のアクティビティのタイムスタンプを取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime ReferringTimestamp
        {
            get
            {
                return this._ReferringTimestamp;
            }
            set
            {
                this.OnReferringTimestampChanging(value);
                this.ReportPropertyChanging("ReferringTimestamp");
                this._ReferringTimestamp = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("ReferringTimestamp");
                this.OnReferringTimestampChanged();
            }
        }
        private global::System.DateTime _ReferringTimestamp;
        partial void OnReferringTimestampChanging(global::System.DateTime value);
        partial void OnReferringTimestampChanged();
        /// <summary>
        /// このリファレンスが関連付けられる先のアクティビティのカテゴリを取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string ReferringCategory
        {
            get
            {
                return this._ReferringCategory;
            }
            set
            {
                this.OnReferringCategoryChanging(value);
                this.ReportPropertyChanging("ReferringCategory");
                this._ReferringCategory = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("ReferringCategory");
                this.OnReferringCategoryChanged();
            }
        }
        private string _ReferringCategory;
        partial void OnReferringCategoryChanging(string value);
        partial void OnReferringCategoryChanged();
        /// <summary>
        /// このリファレンスが関連付けられる先のアクティビティのサブ ID を取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string ReferringSubId
        {
            get
            {
                return this._ReferringSubId;
            }
            set
            {
                this.OnReferringSubIdChanging(value);
                this.ReportPropertyChanging("ReferringSubId");
                this._ReferringSubId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("ReferringSubId");
                this.OnReferringSubIdChanged();
            }
        }
        private string _ReferringSubId;
        partial void OnReferringSubIdChanging(string value);
        partial void OnReferringSubIdChanged();
        /// <summary>
        /// このリファレンスが関連付けられているアクティビティを取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("MetaTweet", "ActivityReference", "Activity")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Activity Activity
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Activity>("MetaTweet.ActivityReference", "Activity").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Activity>("MetaTweet.ActivityReference", "Activity").Value = value;
            }
        }
        /// <summary>
        /// このリファレンスが関連付けられているアクティビティを取得または設定します。
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Activity> ActivityReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Activity>("MetaTweet.ActivityReference", "Activity");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Activity>("MetaTweet.ActivityReference", "Activity", value);
                }
            }
        }
    }
    /// <summary>
    /// アカウント同士の関係を記述する情報を表します。
    /// </summary>
    /// <LongDescription>
    /// リレーションは、アカウント同士の関係を記述する付与情報です。
    /// </LongDescription>
    /// <KeyProperties>
    /// AccountId
    /// Name
    /// RelatingAccountId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="MetaTweet", Name="Relation")]
    // [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class Relation : StorageObject
    {
        /*
        /// <summary>
        /// Create a new Relation object.
        /// </summary>
        /// <param name="accountId">Initial value of AccountId.</param>
        /// <param name="name">Initial value of Name.</param>
        /// <param name="relatingAccountId">Initial value of RelatingAccountId.</param>
        public static Relation CreateRelation(string accountId, string name, string relatingAccountId)
        {
            Relation relation = new Relation();
            relation.AccountId = accountId;
            relation.Name = name;
            relation.RelatingAccountId = relatingAccountId;
            return relation;
        }
        */
        /// <summary>
        /// このリレーションが関連付けられているアカウントの ID を取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string AccountId
        {
            get
            {
                return this._AccountId;
            }
            set
            {
                this.OnAccountIdChanging(value);
                this.ReportPropertyChanging("AccountId");
                this._AccountId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("AccountId");
                this.OnAccountIdChanged();
            }
        }
        private string _AccountId;
        partial void OnAccountIdChanging(string value);
        partial void OnAccountIdChanged();
        /// <summary>
        /// このリレーションの意味となる文字列を取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                this.OnNameChanging(value);
                this.ReportPropertyChanging("Name");
                this._Name = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("Name");
                this.OnNameChanged();
            }
        }
        private string _Name;
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        /// <summary>
        /// このリレーションが関連付けられる先のアカウントの ID を取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string RelatingAccountId
        {
            get
            {
                return this._RelatingAccountId;
            }
            set
            {
                this.OnRelatingAccountIdChanging(value);
                this.ReportPropertyChanging("RelatingAccountId");
                this._RelatingAccountId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("RelatingAccountId");
                this.OnRelatingAccountIdChanged();
            }
        }
        private string _RelatingAccountId;
        partial void OnRelatingAccountIdChanging(string value);
        partial void OnRelatingAccountIdChanged();
        /// <summary>
        /// このリレーションが関連付けられているアカウントを取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("MetaTweet", "AccountRelation", "Account")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Account Account
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Account>("MetaTweet.AccountRelation", "Account").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Account>("MetaTweet.AccountRelation", "Account").Value = value;
            }
        }
        /// <summary>
        /// このリレーションが関連付けられているアカウントを取得または設定します。
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Account> AccountReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Account>("MetaTweet.AccountRelation", "Account");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Account>("MetaTweet.AccountRelation", "Account", value);
                }
            }
        }
    }
    /// <summary>
    /// アクティビティに追加して記述される情報を表します。
    /// </summary>
    /// <LongDescription>
    /// タグは、アクティビティに追加の情報を記述する付与情報です。
    /// </LongDescription>
    /// <KeyProperties>
    /// AccountId
    /// Timestamp
    /// Category
    /// SubId
    /// Name
    /// Value
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="MetaTweet", Name="Tag")]
    // [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class Tag : StorageObject
    {
        /*
        /// <summary>
        /// Create a new Tag object.
        /// </summary>
        /// <param name="accountId">Initial value of AccountId.</param>
        /// <param name="timestamp">Initial value of Timestamp.</param>
        /// <param name="category">Initial value of Category.</param>
        /// <param name="subId">Initial value of SubId.</param>
        /// <param name="name">Initial value of Name.</param>
        /// <param name="value">Initial value of Value.</param>
        public static Tag CreateTag(string accountId, global::System.DateTime timestamp, string category, string subId, string name, string value)
        {
            Tag tag = new Tag();
            tag.AccountId = accountId;
            tag.Timestamp = timestamp;
            tag.Category = category;
            tag.SubId = subId;
            tag.Name = name;
            tag.Value = value;
            return tag;
        }
        */
        /// <summary>
        /// このタグが関連付けられているアクティビティのアカウント ID を取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string AccountId
        {
            get
            {
                return this._AccountId;
            }
            set
            {
                this.OnAccountIdChanging(value);
                this.ReportPropertyChanging("AccountId");
                this._AccountId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("AccountId");
                this.OnAccountIdChanged();
            }
        }
        private string _AccountId;
        partial void OnAccountIdChanging(string value);
        partial void OnAccountIdChanged();
        /// <summary>
        /// このタグが関連付けられているアクティビティのタイムスタンプを取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime Timestamp
        {
            get
            {
                return this._Timestamp;
            }
            set
            {
                this.OnTimestampChanging(value);
                this.ReportPropertyChanging("Timestamp");
                this._Timestamp = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("Timestamp");
                this.OnTimestampChanged();
            }
        }
        private global::System.DateTime _Timestamp;
        partial void OnTimestampChanging(global::System.DateTime value);
        partial void OnTimestampChanged();
        /// <summary>
        /// このタグが関連付けられているアクティビティのカテゴリを取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string Category
        {
            get
            {
                return this._Category;
            }
            set
            {
                this.OnCategoryChanging(value);
                this.ReportPropertyChanging("Category");
                this._Category = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("Category");
                this.OnCategoryChanged();
            }
        }
        private string _Category;
        partial void OnCategoryChanging(string value);
        partial void OnCategoryChanged();
        /// <summary>
        /// このタグが関連付けられているアクティビティのサブ ID を取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string SubId
        {
            get
            {
                return this._SubId;
            }
            set
            {
                this.OnSubIdChanging(value);
                this.ReportPropertyChanging("SubId");
                this._SubId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("SubId");
                this.OnSubIdChanged();
            }
        }
        private string _SubId;
        partial void OnSubIdChanging(string value);
        partial void OnSubIdChanged();
        /// <summary>
        /// このタグの意味となる文字列を取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                this.OnNameChanging(value);
                this.ReportPropertyChanging("Name");
                this._Name = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("Name");
                this.OnNameChanged();
            }
        }
        private string _Name;
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        /// <summary>
        /// このタグの値となる文字列を取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                this.OnValueChanging(value);
                this.ReportPropertyChanging("Value");
                this._Value = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("Value");
                this.OnValueChanged();
            }
        }
        private string _Value;
        partial void OnValueChanging(string value);
        partial void OnValueChanged();
        /// <summary>
        /// このタグが関連付けられているアクティビティを取得または設定します。
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("MetaTweet", "ActivityTag", "Activity")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Activity Activity
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Activity>("MetaTweet.ActivityTag", "Activity").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Activity>("MetaTweet.ActivityTag", "Activity").Value = value;
            }
        }
        /// <summary>
        /// このタグが関連付けられているアクティビティを取得または設定します。
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        // [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Activity> ActivityReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Activity>("MetaTweet.ActivityTag", "Activity");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Activity>("MetaTweet.ActivityTag", "Activity", value);
                }
            }
        }
    }
}
